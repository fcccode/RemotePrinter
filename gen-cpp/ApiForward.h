/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ApiForward_H
#define ApiForward_H

#include <thrift/TDispatchProcessor.h>
#include "apiforward_types.h"
#include "SelfService.h"

namespace apiforward {

class ApiForwardIf : virtual public  ::userdefined::SelfServiceIf {
 public:
  virtual ~ApiForwardIf() {}
};

class ApiForwardIfFactory : virtual public  ::userdefined::SelfServiceIfFactory {
 public:
  typedef ApiForwardIf Handler;

  virtual ~ApiForwardIfFactory() {}

  virtual ApiForwardIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::userdefined::SelfServiceIf* /* handler */) = 0;
};

class ApiForwardIfSingletonFactory : virtual public ApiForwardIfFactory {
 public:
  ApiForwardIfSingletonFactory(const boost::shared_ptr<ApiForwardIf>& iface) : iface_(iface) {}
  virtual ~ApiForwardIfSingletonFactory() {}

  virtual ApiForwardIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::userdefined::SelfServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ApiForwardIf> iface_;
};

class ApiForwardNull : virtual public ApiForwardIf , virtual public  ::userdefined::SelfServiceNull {
 public:
  virtual ~ApiForwardNull() {}
};

class ApiForwardClient : virtual public ApiForwardIf, public  ::userdefined::SelfServiceClient {
 public:
  ApiForwardClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::userdefined::SelfServiceClient(prot, prot) {}
  ApiForwardClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::userdefined::SelfServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
};

class ApiForwardProcessor : public  ::userdefined::SelfServiceProcessor {
 protected:
  boost::shared_ptr<ApiForwardIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ApiForwardProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
 public:
  ApiForwardProcessor(boost::shared_ptr<ApiForwardIf> iface) :
     ::userdefined::SelfServiceProcessor(iface),
    iface_(iface) {
  }

  virtual ~ApiForwardProcessor() {}
};

class ApiForwardProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ApiForwardProcessorFactory(const ::boost::shared_ptr< ApiForwardIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ApiForwardIfFactory > handlerFactory_;
};

class ApiForwardMultiface : virtual public ApiForwardIf, public  ::userdefined::SelfServiceMultiface {
 public:
  ApiForwardMultiface(std::vector<boost::shared_ptr<ApiForwardIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<ApiForwardIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::userdefined::SelfServiceMultiface::add(*iter);
    }
  }
  virtual ~ApiForwardMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ApiForwardIf> > ifaces_;
  ApiForwardMultiface() {}
  void add(boost::shared_ptr<ApiForwardIf> iface) {
     ::userdefined::SelfServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
};

} // namespace

#endif

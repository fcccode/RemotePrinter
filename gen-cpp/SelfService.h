/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SelfService_H
#define SelfService_H

#include <thrift/TDispatchProcessor.h>
#include "userdefined_types.h"

namespace userdefined {

class SelfServiceIf {
 public:
  virtual ~SelfServiceIf() {}
  virtual void OpenPrinterA(std::map<std::string, int64_t> & _return, const std::string& pPrinterName, const bool pDefaultExist, const std::string& pDatatype, const std::string& pDevMode, const int32_t DesiredAccess) = 0;
  virtual void OpenPrinterW(std::map<std::string, int64_t> & _return, const std::string& pPrinterName, const bool pDefaultExist, const std::string& pDatatype, const std::string& pDevMode, const int32_t DesiredAccess) = 0;
  virtual bool StartPagePrinter(const int64_t hPrinter) = 0;
  virtual int32_t StartDocPrinterW(const int64_t hPrinter, const int32_t Level, const std::string& pDocName, const std::string& pOutputFile, const std::string& pDatatype) = 0;
  virtual void WritePrinter(std::map<std::string, int32_t> & _return, const int64_t hPrinter, const std::string& pBuf, const int32_t cbBuf) = 0;
  virtual bool EndPagePrinter(const int64_t hPrinter) = 0;
  virtual bool EndDocPrinter(const int64_t hPrinter) = 0;
  virtual bool ClosePrinter(const int64_t hPrinter) = 0;
  virtual bool CloseSpoolFileHandle(const int64_t hPrinter, const int64_t hSpoolFile) = 0;
  virtual int64_t CommitSpoolData(const int64_t hPrinter, const int64_t hSpoolFile, const int32_t cbCommit) = 0;
  virtual void DocumentEvent(std::map<std::string, std::string> & _return, const int64_t hPrinter, const int64_t hdc, const int32_t iEsc, const int32_t cbIn, const std::string& pvIn, const int32_t cbOut, const std::string& pvOut) = 0;
  virtual void DocumentPropertiesW(std::map<std::string, std::string> & _return, const int64_t hWnd, const int64_t hPrinter, const std::string& pDeviceName, const std::string& pDevModeInput, const int32_t fMode) = 0;
  virtual void EnumFormsW(std::map<std::string, std::string> & _return, const int64_t hPrinter, const int32_t Level, const int32_t cbBuf) = 0;
  virtual void EnumPrintersW(std::map<std::string, std::string> & _return, const int32_t Flags, const std::string& Name, const int32_t Level, const int32_t cbBuf) = 0;
  virtual bool FindClosePrinterChangeNotification(const int64_t hChange) = 0;
  virtual int64_t FindFirstPrinterChangeNotification(const int64_t hPrinter, const int32_t fdwFilter, const int32_t fdwOptions, const std::string& pPrinterNotifyOptions) = 0;
  virtual void FindNextPrinterChangeNotification(std::map<std::string, std::string> & _return, const int64_t hChange, const std::string& pPrinterNotifyOptions) = 0;
  virtual bool FreePrinterNotifyInfo(const std::string& pPrinterNotifyInfo) = 0;
  virtual void GetDefaultPrinterW(ArgGetDefaultPrinterW& _return, const ArgGetDefaultPrinterW& arg) = 0;
  virtual void GetPrinterDataW(std::map<std::string, std::string> & _return, const int64_t hPrinter, const std::string& pValueName, const int32_t nSize) = 0;
  virtual void GetPrinterDataExW(std::map<std::string, std::string> & _return, const int64_t hPrinter, const std::string& pKeyName, const std::string& pValueName, const int32_t nSize) = 0;
  virtual void GetPrinterW(std::map<std::string, std::string> & _return, const int64_t hPrinter, const int32_t Level, const int32_t cbBuf) = 0;
  virtual int64_t GetSpoolFileHandle(const int64_t hPrinter) = 0;
  virtual bool IsValidDevmodeW(const std::string& pDevmode, const int32_t DevmodeSize) = 0;
  virtual void OpenPrinter2W(std::map<std::string, int64_t> & _return, const std::string& pPrinterName, const bool pDefaultExist, const std::string& pDatatype, const std::string& pDevMode, const int32_t DesiredAccess, const std::string& pOptions) = 0;
  virtual void OpenPrinter2A(std::map<std::string, int64_t> & _return, const std::string& pPrinterName, const bool pDefaultExist, const std::string& pDatatype, const std::string& pDevMode, const int32_t DesiredAccess, const std::string& pOptions) = 0;
  virtual int32_t OpenUsbPort(const int32_t dwModel) = 0;
  virtual int32_t CloseUsbPort() = 0;
  virtual int32_t WriteUSB(const std::string& pBuffer, const int32_t nNumberOfBytesToWrite) = 0;
  virtual int32_t ReadUSB(const std::string& pBuffer, const int32_t nNumberOfByteToRead) = 0;
  virtual int32_t PrintBitmap(const std::string& pbmpDir, const std::string& data) = 0;
  virtual int32_t Print1DBarcode(const int32_t nCodeType, const int32_t nWidth, const int32_t nHeight, const int32_t nHRI, const std::string& pBuffer) = 0;
  virtual int32_t PrintPDF417(const int32_t nColumns, const int32_t nRows, const int32_t nWidth, const int32_t nHeight, const int32_t nECLevel, const int32_t nModule, const std::string& pBuffer, const std::string& data) = 0;
  virtual int32_t PrintQRCode(const int32_t nModule, const int32_t nSize, const int32_t nECLevel, const std::string& pBuffer) = 0;
};

class SelfServiceIfFactory {
 public:
  typedef SelfServiceIf Handler;

  virtual ~SelfServiceIfFactory() {}

  virtual SelfServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SelfServiceIf* /* handler */) = 0;
};

class SelfServiceIfSingletonFactory : virtual public SelfServiceIfFactory {
 public:
  SelfServiceIfSingletonFactory(const boost::shared_ptr<SelfServiceIf>& iface) : iface_(iface) {}
  virtual ~SelfServiceIfSingletonFactory() {}

  virtual SelfServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SelfServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<SelfServiceIf> iface_;
};

class SelfServiceNull : virtual public SelfServiceIf {
 public:
  virtual ~SelfServiceNull() {}
  void OpenPrinterA(std::map<std::string, int64_t> & /* _return */, const std::string& /* pPrinterName */, const bool /* pDefaultExist */, const std::string& /* pDatatype */, const std::string& /* pDevMode */, const int32_t /* DesiredAccess */) {
    return;
  }
  void OpenPrinterW(std::map<std::string, int64_t> & /* _return */, const std::string& /* pPrinterName */, const bool /* pDefaultExist */, const std::string& /* pDatatype */, const std::string& /* pDevMode */, const int32_t /* DesiredAccess */) {
    return;
  }
  bool StartPagePrinter(const int64_t /* hPrinter */) {
    bool _return = false;
    return _return;
  }
  int32_t StartDocPrinterW(const int64_t /* hPrinter */, const int32_t /* Level */, const std::string& /* pDocName */, const std::string& /* pOutputFile */, const std::string& /* pDatatype */) {
    int32_t _return = 0;
    return _return;
  }
  void WritePrinter(std::map<std::string, int32_t> & /* _return */, const int64_t /* hPrinter */, const std::string& /* pBuf */, const int32_t /* cbBuf */) {
    return;
  }
  bool EndPagePrinter(const int64_t /* hPrinter */) {
    bool _return = false;
    return _return;
  }
  bool EndDocPrinter(const int64_t /* hPrinter */) {
    bool _return = false;
    return _return;
  }
  bool ClosePrinter(const int64_t /* hPrinter */) {
    bool _return = false;
    return _return;
  }
  bool CloseSpoolFileHandle(const int64_t /* hPrinter */, const int64_t /* hSpoolFile */) {
    bool _return = false;
    return _return;
  }
  int64_t CommitSpoolData(const int64_t /* hPrinter */, const int64_t /* hSpoolFile */, const int32_t /* cbCommit */) {
    int64_t _return = 0;
    return _return;
  }
  void DocumentEvent(std::map<std::string, std::string> & /* _return */, const int64_t /* hPrinter */, const int64_t /* hdc */, const int32_t /* iEsc */, const int32_t /* cbIn */, const std::string& /* pvIn */, const int32_t /* cbOut */, const std::string& /* pvOut */) {
    return;
  }
  void DocumentPropertiesW(std::map<std::string, std::string> & /* _return */, const int64_t /* hWnd */, const int64_t /* hPrinter */, const std::string& /* pDeviceName */, const std::string& /* pDevModeInput */, const int32_t /* fMode */) {
    return;
  }
  void EnumFormsW(std::map<std::string, std::string> & /* _return */, const int64_t /* hPrinter */, const int32_t /* Level */, const int32_t /* cbBuf */) {
    return;
  }
  void EnumPrintersW(std::map<std::string, std::string> & /* _return */, const int32_t /* Flags */, const std::string& /* Name */, const int32_t /* Level */, const int32_t /* cbBuf */) {
    return;
  }
  bool FindClosePrinterChangeNotification(const int64_t /* hChange */) {
    bool _return = false;
    return _return;
  }
  int64_t FindFirstPrinterChangeNotification(const int64_t /* hPrinter */, const int32_t /* fdwFilter */, const int32_t /* fdwOptions */, const std::string& /* pPrinterNotifyOptions */) {
    int64_t _return = 0;
    return _return;
  }
  void FindNextPrinterChangeNotification(std::map<std::string, std::string> & /* _return */, const int64_t /* hChange */, const std::string& /* pPrinterNotifyOptions */) {
    return;
  }
  bool FreePrinterNotifyInfo(const std::string& /* pPrinterNotifyInfo */) {
    bool _return = false;
    return _return;
  }
  void GetDefaultPrinterW(ArgGetDefaultPrinterW& /* _return */, const ArgGetDefaultPrinterW& /* arg */) {
    return;
  }
  void GetPrinterDataW(std::map<std::string, std::string> & /* _return */, const int64_t /* hPrinter */, const std::string& /* pValueName */, const int32_t /* nSize */) {
    return;
  }
  void GetPrinterDataExW(std::map<std::string, std::string> & /* _return */, const int64_t /* hPrinter */, const std::string& /* pKeyName */, const std::string& /* pValueName */, const int32_t /* nSize */) {
    return;
  }
  void GetPrinterW(std::map<std::string, std::string> & /* _return */, const int64_t /* hPrinter */, const int32_t /* Level */, const int32_t /* cbBuf */) {
    return;
  }
  int64_t GetSpoolFileHandle(const int64_t /* hPrinter */) {
    int64_t _return = 0;
    return _return;
  }
  bool IsValidDevmodeW(const std::string& /* pDevmode */, const int32_t /* DevmodeSize */) {
    bool _return = false;
    return _return;
  }
  void OpenPrinter2W(std::map<std::string, int64_t> & /* _return */, const std::string& /* pPrinterName */, const bool /* pDefaultExist */, const std::string& /* pDatatype */, const std::string& /* pDevMode */, const int32_t /* DesiredAccess */, const std::string& /* pOptions */) {
    return;
  }
  void OpenPrinter2A(std::map<std::string, int64_t> & /* _return */, const std::string& /* pPrinterName */, const bool /* pDefaultExist */, const std::string& /* pDatatype */, const std::string& /* pDevMode */, const int32_t /* DesiredAccess */, const std::string& /* pOptions */) {
    return;
  }
  int32_t OpenUsbPort(const int32_t /* dwModel */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t CloseUsbPort() {
    int32_t _return = 0;
    return _return;
  }
  int32_t WriteUSB(const std::string& /* pBuffer */, const int32_t /* nNumberOfBytesToWrite */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t ReadUSB(const std::string& /* pBuffer */, const int32_t /* nNumberOfByteToRead */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t PrintBitmap(const std::string& /* pbmpDir */, const std::string& /* data */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t Print1DBarcode(const int32_t /* nCodeType */, const int32_t /* nWidth */, const int32_t /* nHeight */, const int32_t /* nHRI */, const std::string& /* pBuffer */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t PrintPDF417(const int32_t /* nColumns */, const int32_t /* nRows */, const int32_t /* nWidth */, const int32_t /* nHeight */, const int32_t /* nECLevel */, const int32_t /* nModule */, const std::string& /* pBuffer */, const std::string& /* data */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t PrintQRCode(const int32_t /* nModule */, const int32_t /* nSize */, const int32_t /* nECLevel */, const std::string& /* pBuffer */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _SelfService_OpenPrinterA_args__isset {
  _SelfService_OpenPrinterA_args__isset() : pPrinterName(false), pDefaultExist(false), pDatatype(false), pDevMode(false), DesiredAccess(false) {}
  bool pPrinterName :1;
  bool pDefaultExist :1;
  bool pDatatype :1;
  bool pDevMode :1;
  bool DesiredAccess :1;
} _SelfService_OpenPrinterA_args__isset;

class SelfService_OpenPrinterA_args {
 public:

  static const char* ascii_fingerprint; // = "E1EBAE357D04E345D5CA3E8F889DD1E2";
  static const uint8_t binary_fingerprint[16]; // = {0xE1,0xEB,0xAE,0x35,0x7D,0x04,0xE3,0x45,0xD5,0xCA,0x3E,0x8F,0x88,0x9D,0xD1,0xE2};

  SelfService_OpenPrinterA_args(const SelfService_OpenPrinterA_args&);
  SelfService_OpenPrinterA_args& operator=(const SelfService_OpenPrinterA_args&);
  SelfService_OpenPrinterA_args() : pPrinterName(), pDefaultExist(0), pDatatype(), pDevMode(), DesiredAccess(0) {
  }

  virtual ~SelfService_OpenPrinterA_args() throw();
  std::string pPrinterName;
  bool pDefaultExist;
  std::string pDatatype;
  std::string pDevMode;
  int32_t DesiredAccess;

  _SelfService_OpenPrinterA_args__isset __isset;

  void __set_pPrinterName(const std::string& val);

  void __set_pDefaultExist(const bool val);

  void __set_pDatatype(const std::string& val);

  void __set_pDevMode(const std::string& val);

  void __set_DesiredAccess(const int32_t val);

  bool operator == (const SelfService_OpenPrinterA_args & rhs) const
  {
    if (!(pPrinterName == rhs.pPrinterName))
      return false;
    if (!(pDefaultExist == rhs.pDefaultExist))
      return false;
    if (!(pDatatype == rhs.pDatatype))
      return false;
    if (!(pDevMode == rhs.pDevMode))
      return false;
    if (!(DesiredAccess == rhs.DesiredAccess))
      return false;
    return true;
  }
  bool operator != (const SelfService_OpenPrinterA_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_OpenPrinterA_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_OpenPrinterA_args& obj);
};


class SelfService_OpenPrinterA_pargs {
 public:

  static const char* ascii_fingerprint; // = "E1EBAE357D04E345D5CA3E8F889DD1E2";
  static const uint8_t binary_fingerprint[16]; // = {0xE1,0xEB,0xAE,0x35,0x7D,0x04,0xE3,0x45,0xD5,0xCA,0x3E,0x8F,0x88,0x9D,0xD1,0xE2};


  virtual ~SelfService_OpenPrinterA_pargs() throw();
  const std::string* pPrinterName;
  const bool* pDefaultExist;
  const std::string* pDatatype;
  const std::string* pDevMode;
  const int32_t* DesiredAccess;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_OpenPrinterA_pargs& obj);
};

typedef struct _SelfService_OpenPrinterA_result__isset {
  _SelfService_OpenPrinterA_result__isset() : success(false) {}
  bool success :1;
} _SelfService_OpenPrinterA_result__isset;

class SelfService_OpenPrinterA_result {
 public:

  static const char* ascii_fingerprint; // = "8EBD4692F4235543421FE18D6A576996";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0xBD,0x46,0x92,0xF4,0x23,0x55,0x43,0x42,0x1F,0xE1,0x8D,0x6A,0x57,0x69,0x96};

  SelfService_OpenPrinterA_result(const SelfService_OpenPrinterA_result&);
  SelfService_OpenPrinterA_result& operator=(const SelfService_OpenPrinterA_result&);
  SelfService_OpenPrinterA_result() {
  }

  virtual ~SelfService_OpenPrinterA_result() throw();
  std::map<std::string, int64_t>  success;

  _SelfService_OpenPrinterA_result__isset __isset;

  void __set_success(const std::map<std::string, int64_t> & val);

  bool operator == (const SelfService_OpenPrinterA_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_OpenPrinterA_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_OpenPrinterA_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_OpenPrinterA_result& obj);
};

typedef struct _SelfService_OpenPrinterA_presult__isset {
  _SelfService_OpenPrinterA_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_OpenPrinterA_presult__isset;

class SelfService_OpenPrinterA_presult {
 public:

  static const char* ascii_fingerprint; // = "8EBD4692F4235543421FE18D6A576996";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0xBD,0x46,0x92,0xF4,0x23,0x55,0x43,0x42,0x1F,0xE1,0x8D,0x6A,0x57,0x69,0x96};


  virtual ~SelfService_OpenPrinterA_presult() throw();
  std::map<std::string, int64_t> * success;

  _SelfService_OpenPrinterA_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_OpenPrinterA_presult& obj);
};

typedef struct _SelfService_OpenPrinterW_args__isset {
  _SelfService_OpenPrinterW_args__isset() : pPrinterName(false), pDefaultExist(false), pDatatype(false), pDevMode(false), DesiredAccess(false) {}
  bool pPrinterName :1;
  bool pDefaultExist :1;
  bool pDatatype :1;
  bool pDevMode :1;
  bool DesiredAccess :1;
} _SelfService_OpenPrinterW_args__isset;

class SelfService_OpenPrinterW_args {
 public:

  static const char* ascii_fingerprint; // = "E1EBAE357D04E345D5CA3E8F889DD1E2";
  static const uint8_t binary_fingerprint[16]; // = {0xE1,0xEB,0xAE,0x35,0x7D,0x04,0xE3,0x45,0xD5,0xCA,0x3E,0x8F,0x88,0x9D,0xD1,0xE2};

  SelfService_OpenPrinterW_args(const SelfService_OpenPrinterW_args&);
  SelfService_OpenPrinterW_args& operator=(const SelfService_OpenPrinterW_args&);
  SelfService_OpenPrinterW_args() : pPrinterName(), pDefaultExist(0), pDatatype(), pDevMode(), DesiredAccess(0) {
  }

  virtual ~SelfService_OpenPrinterW_args() throw();
  std::string pPrinterName;
  bool pDefaultExist;
  std::string pDatatype;
  std::string pDevMode;
  int32_t DesiredAccess;

  _SelfService_OpenPrinterW_args__isset __isset;

  void __set_pPrinterName(const std::string& val);

  void __set_pDefaultExist(const bool val);

  void __set_pDatatype(const std::string& val);

  void __set_pDevMode(const std::string& val);

  void __set_DesiredAccess(const int32_t val);

  bool operator == (const SelfService_OpenPrinterW_args & rhs) const
  {
    if (!(pPrinterName == rhs.pPrinterName))
      return false;
    if (!(pDefaultExist == rhs.pDefaultExist))
      return false;
    if (!(pDatatype == rhs.pDatatype))
      return false;
    if (!(pDevMode == rhs.pDevMode))
      return false;
    if (!(DesiredAccess == rhs.DesiredAccess))
      return false;
    return true;
  }
  bool operator != (const SelfService_OpenPrinterW_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_OpenPrinterW_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_OpenPrinterW_args& obj);
};


class SelfService_OpenPrinterW_pargs {
 public:

  static const char* ascii_fingerprint; // = "E1EBAE357D04E345D5CA3E8F889DD1E2";
  static const uint8_t binary_fingerprint[16]; // = {0xE1,0xEB,0xAE,0x35,0x7D,0x04,0xE3,0x45,0xD5,0xCA,0x3E,0x8F,0x88,0x9D,0xD1,0xE2};


  virtual ~SelfService_OpenPrinterW_pargs() throw();
  const std::string* pPrinterName;
  const bool* pDefaultExist;
  const std::string* pDatatype;
  const std::string* pDevMode;
  const int32_t* DesiredAccess;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_OpenPrinterW_pargs& obj);
};

typedef struct _SelfService_OpenPrinterW_result__isset {
  _SelfService_OpenPrinterW_result__isset() : success(false) {}
  bool success :1;
} _SelfService_OpenPrinterW_result__isset;

class SelfService_OpenPrinterW_result {
 public:

  static const char* ascii_fingerprint; // = "8EBD4692F4235543421FE18D6A576996";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0xBD,0x46,0x92,0xF4,0x23,0x55,0x43,0x42,0x1F,0xE1,0x8D,0x6A,0x57,0x69,0x96};

  SelfService_OpenPrinterW_result(const SelfService_OpenPrinterW_result&);
  SelfService_OpenPrinterW_result& operator=(const SelfService_OpenPrinterW_result&);
  SelfService_OpenPrinterW_result() {
  }

  virtual ~SelfService_OpenPrinterW_result() throw();
  std::map<std::string, int64_t>  success;

  _SelfService_OpenPrinterW_result__isset __isset;

  void __set_success(const std::map<std::string, int64_t> & val);

  bool operator == (const SelfService_OpenPrinterW_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_OpenPrinterW_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_OpenPrinterW_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_OpenPrinterW_result& obj);
};

typedef struct _SelfService_OpenPrinterW_presult__isset {
  _SelfService_OpenPrinterW_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_OpenPrinterW_presult__isset;

class SelfService_OpenPrinterW_presult {
 public:

  static const char* ascii_fingerprint; // = "8EBD4692F4235543421FE18D6A576996";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0xBD,0x46,0x92,0xF4,0x23,0x55,0x43,0x42,0x1F,0xE1,0x8D,0x6A,0x57,0x69,0x96};


  virtual ~SelfService_OpenPrinterW_presult() throw();
  std::map<std::string, int64_t> * success;

  _SelfService_OpenPrinterW_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_OpenPrinterW_presult& obj);
};

typedef struct _SelfService_StartPagePrinter_args__isset {
  _SelfService_StartPagePrinter_args__isset() : hPrinter(false) {}
  bool hPrinter :1;
} _SelfService_StartPagePrinter_args__isset;

class SelfService_StartPagePrinter_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  SelfService_StartPagePrinter_args(const SelfService_StartPagePrinter_args&);
  SelfService_StartPagePrinter_args& operator=(const SelfService_StartPagePrinter_args&);
  SelfService_StartPagePrinter_args() : hPrinter(0) {
  }

  virtual ~SelfService_StartPagePrinter_args() throw();
  int64_t hPrinter;

  _SelfService_StartPagePrinter_args__isset __isset;

  void __set_hPrinter(const int64_t val);

  bool operator == (const SelfService_StartPagePrinter_args & rhs) const
  {
    if (!(hPrinter == rhs.hPrinter))
      return false;
    return true;
  }
  bool operator != (const SelfService_StartPagePrinter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_StartPagePrinter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_StartPagePrinter_args& obj);
};


class SelfService_StartPagePrinter_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~SelfService_StartPagePrinter_pargs() throw();
  const int64_t* hPrinter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_StartPagePrinter_pargs& obj);
};

typedef struct _SelfService_StartPagePrinter_result__isset {
  _SelfService_StartPagePrinter_result__isset() : success(false) {}
  bool success :1;
} _SelfService_StartPagePrinter_result__isset;

class SelfService_StartPagePrinter_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  SelfService_StartPagePrinter_result(const SelfService_StartPagePrinter_result&);
  SelfService_StartPagePrinter_result& operator=(const SelfService_StartPagePrinter_result&);
  SelfService_StartPagePrinter_result() : success(0) {
  }

  virtual ~SelfService_StartPagePrinter_result() throw();
  bool success;

  _SelfService_StartPagePrinter_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SelfService_StartPagePrinter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_StartPagePrinter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_StartPagePrinter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_StartPagePrinter_result& obj);
};

typedef struct _SelfService_StartPagePrinter_presult__isset {
  _SelfService_StartPagePrinter_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_StartPagePrinter_presult__isset;

class SelfService_StartPagePrinter_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~SelfService_StartPagePrinter_presult() throw();
  bool* success;

  _SelfService_StartPagePrinter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_StartPagePrinter_presult& obj);
};

typedef struct _SelfService_StartDocPrinterW_args__isset {
  _SelfService_StartDocPrinterW_args__isset() : hPrinter(false), Level(false), pDocName(false), pOutputFile(false), pDatatype(false) {}
  bool hPrinter :1;
  bool Level :1;
  bool pDocName :1;
  bool pOutputFile :1;
  bool pDatatype :1;
} _SelfService_StartDocPrinterW_args__isset;

class SelfService_StartDocPrinterW_args {
 public:

  static const char* ascii_fingerprint; // = "509DA08366F168B598ED1CA8DA4877FE";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x9D,0xA0,0x83,0x66,0xF1,0x68,0xB5,0x98,0xED,0x1C,0xA8,0xDA,0x48,0x77,0xFE};

  SelfService_StartDocPrinterW_args(const SelfService_StartDocPrinterW_args&);
  SelfService_StartDocPrinterW_args& operator=(const SelfService_StartDocPrinterW_args&);
  SelfService_StartDocPrinterW_args() : hPrinter(0), Level(0), pDocName(), pOutputFile(), pDatatype() {
  }

  virtual ~SelfService_StartDocPrinterW_args() throw();
  int64_t hPrinter;
  int32_t Level;
  std::string pDocName;
  std::string pOutputFile;
  std::string pDatatype;

  _SelfService_StartDocPrinterW_args__isset __isset;

  void __set_hPrinter(const int64_t val);

  void __set_Level(const int32_t val);

  void __set_pDocName(const std::string& val);

  void __set_pOutputFile(const std::string& val);

  void __set_pDatatype(const std::string& val);

  bool operator == (const SelfService_StartDocPrinterW_args & rhs) const
  {
    if (!(hPrinter == rhs.hPrinter))
      return false;
    if (!(Level == rhs.Level))
      return false;
    if (!(pDocName == rhs.pDocName))
      return false;
    if (!(pOutputFile == rhs.pOutputFile))
      return false;
    if (!(pDatatype == rhs.pDatatype))
      return false;
    return true;
  }
  bool operator != (const SelfService_StartDocPrinterW_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_StartDocPrinterW_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_StartDocPrinterW_args& obj);
};


class SelfService_StartDocPrinterW_pargs {
 public:

  static const char* ascii_fingerprint; // = "509DA08366F168B598ED1CA8DA4877FE";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x9D,0xA0,0x83,0x66,0xF1,0x68,0xB5,0x98,0xED,0x1C,0xA8,0xDA,0x48,0x77,0xFE};


  virtual ~SelfService_StartDocPrinterW_pargs() throw();
  const int64_t* hPrinter;
  const int32_t* Level;
  const std::string* pDocName;
  const std::string* pOutputFile;
  const std::string* pDatatype;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_StartDocPrinterW_pargs& obj);
};

typedef struct _SelfService_StartDocPrinterW_result__isset {
  _SelfService_StartDocPrinterW_result__isset() : success(false) {}
  bool success :1;
} _SelfService_StartDocPrinterW_result__isset;

class SelfService_StartDocPrinterW_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  SelfService_StartDocPrinterW_result(const SelfService_StartDocPrinterW_result&);
  SelfService_StartDocPrinterW_result& operator=(const SelfService_StartDocPrinterW_result&);
  SelfService_StartDocPrinterW_result() : success(0) {
  }

  virtual ~SelfService_StartDocPrinterW_result() throw();
  int32_t success;

  _SelfService_StartDocPrinterW_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SelfService_StartDocPrinterW_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_StartDocPrinterW_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_StartDocPrinterW_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_StartDocPrinterW_result& obj);
};

typedef struct _SelfService_StartDocPrinterW_presult__isset {
  _SelfService_StartDocPrinterW_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_StartDocPrinterW_presult__isset;

class SelfService_StartDocPrinterW_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~SelfService_StartDocPrinterW_presult() throw();
  int32_t* success;

  _SelfService_StartDocPrinterW_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_StartDocPrinterW_presult& obj);
};

typedef struct _SelfService_WritePrinter_args__isset {
  _SelfService_WritePrinter_args__isset() : hPrinter(false), pBuf(false), cbBuf(false) {}
  bool hPrinter :1;
  bool pBuf :1;
  bool cbBuf :1;
} _SelfService_WritePrinter_args__isset;

class SelfService_WritePrinter_args {
 public:

  static const char* ascii_fingerprint; // = "FA14FF3C297F6EBE2FC46FD846FF0E76";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x14,0xFF,0x3C,0x29,0x7F,0x6E,0xBE,0x2F,0xC4,0x6F,0xD8,0x46,0xFF,0x0E,0x76};

  SelfService_WritePrinter_args(const SelfService_WritePrinter_args&);
  SelfService_WritePrinter_args& operator=(const SelfService_WritePrinter_args&);
  SelfService_WritePrinter_args() : hPrinter(0), pBuf(), cbBuf(0) {
  }

  virtual ~SelfService_WritePrinter_args() throw();
  int64_t hPrinter;
  std::string pBuf;
  int32_t cbBuf;

  _SelfService_WritePrinter_args__isset __isset;

  void __set_hPrinter(const int64_t val);

  void __set_pBuf(const std::string& val);

  void __set_cbBuf(const int32_t val);

  bool operator == (const SelfService_WritePrinter_args & rhs) const
  {
    if (!(hPrinter == rhs.hPrinter))
      return false;
    if (!(pBuf == rhs.pBuf))
      return false;
    if (!(cbBuf == rhs.cbBuf))
      return false;
    return true;
  }
  bool operator != (const SelfService_WritePrinter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_WritePrinter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_WritePrinter_args& obj);
};


class SelfService_WritePrinter_pargs {
 public:

  static const char* ascii_fingerprint; // = "FA14FF3C297F6EBE2FC46FD846FF0E76";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x14,0xFF,0x3C,0x29,0x7F,0x6E,0xBE,0x2F,0xC4,0x6F,0xD8,0x46,0xFF,0x0E,0x76};


  virtual ~SelfService_WritePrinter_pargs() throw();
  const int64_t* hPrinter;
  const std::string* pBuf;
  const int32_t* cbBuf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_WritePrinter_pargs& obj);
};

typedef struct _SelfService_WritePrinter_result__isset {
  _SelfService_WritePrinter_result__isset() : success(false) {}
  bool success :1;
} _SelfService_WritePrinter_result__isset;

class SelfService_WritePrinter_result {
 public:

  static const char* ascii_fingerprint; // = "7C515227315A17E9031F09B9C74E4259";
  static const uint8_t binary_fingerprint[16]; // = {0x7C,0x51,0x52,0x27,0x31,0x5A,0x17,0xE9,0x03,0x1F,0x09,0xB9,0xC7,0x4E,0x42,0x59};

  SelfService_WritePrinter_result(const SelfService_WritePrinter_result&);
  SelfService_WritePrinter_result& operator=(const SelfService_WritePrinter_result&);
  SelfService_WritePrinter_result() {
  }

  virtual ~SelfService_WritePrinter_result() throw();
  std::map<std::string, int32_t>  success;

  _SelfService_WritePrinter_result__isset __isset;

  void __set_success(const std::map<std::string, int32_t> & val);

  bool operator == (const SelfService_WritePrinter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_WritePrinter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_WritePrinter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_WritePrinter_result& obj);
};

typedef struct _SelfService_WritePrinter_presult__isset {
  _SelfService_WritePrinter_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_WritePrinter_presult__isset;

class SelfService_WritePrinter_presult {
 public:

  static const char* ascii_fingerprint; // = "7C515227315A17E9031F09B9C74E4259";
  static const uint8_t binary_fingerprint[16]; // = {0x7C,0x51,0x52,0x27,0x31,0x5A,0x17,0xE9,0x03,0x1F,0x09,0xB9,0xC7,0x4E,0x42,0x59};


  virtual ~SelfService_WritePrinter_presult() throw();
  std::map<std::string, int32_t> * success;

  _SelfService_WritePrinter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_WritePrinter_presult& obj);
};

typedef struct _SelfService_EndPagePrinter_args__isset {
  _SelfService_EndPagePrinter_args__isset() : hPrinter(false) {}
  bool hPrinter :1;
} _SelfService_EndPagePrinter_args__isset;

class SelfService_EndPagePrinter_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  SelfService_EndPagePrinter_args(const SelfService_EndPagePrinter_args&);
  SelfService_EndPagePrinter_args& operator=(const SelfService_EndPagePrinter_args&);
  SelfService_EndPagePrinter_args() : hPrinter(0) {
  }

  virtual ~SelfService_EndPagePrinter_args() throw();
  int64_t hPrinter;

  _SelfService_EndPagePrinter_args__isset __isset;

  void __set_hPrinter(const int64_t val);

  bool operator == (const SelfService_EndPagePrinter_args & rhs) const
  {
    if (!(hPrinter == rhs.hPrinter))
      return false;
    return true;
  }
  bool operator != (const SelfService_EndPagePrinter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_EndPagePrinter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_EndPagePrinter_args& obj);
};


class SelfService_EndPagePrinter_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~SelfService_EndPagePrinter_pargs() throw();
  const int64_t* hPrinter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_EndPagePrinter_pargs& obj);
};

typedef struct _SelfService_EndPagePrinter_result__isset {
  _SelfService_EndPagePrinter_result__isset() : success(false) {}
  bool success :1;
} _SelfService_EndPagePrinter_result__isset;

class SelfService_EndPagePrinter_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  SelfService_EndPagePrinter_result(const SelfService_EndPagePrinter_result&);
  SelfService_EndPagePrinter_result& operator=(const SelfService_EndPagePrinter_result&);
  SelfService_EndPagePrinter_result() : success(0) {
  }

  virtual ~SelfService_EndPagePrinter_result() throw();
  bool success;

  _SelfService_EndPagePrinter_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SelfService_EndPagePrinter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_EndPagePrinter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_EndPagePrinter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_EndPagePrinter_result& obj);
};

typedef struct _SelfService_EndPagePrinter_presult__isset {
  _SelfService_EndPagePrinter_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_EndPagePrinter_presult__isset;

class SelfService_EndPagePrinter_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~SelfService_EndPagePrinter_presult() throw();
  bool* success;

  _SelfService_EndPagePrinter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_EndPagePrinter_presult& obj);
};

typedef struct _SelfService_EndDocPrinter_args__isset {
  _SelfService_EndDocPrinter_args__isset() : hPrinter(false) {}
  bool hPrinter :1;
} _SelfService_EndDocPrinter_args__isset;

class SelfService_EndDocPrinter_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  SelfService_EndDocPrinter_args(const SelfService_EndDocPrinter_args&);
  SelfService_EndDocPrinter_args& operator=(const SelfService_EndDocPrinter_args&);
  SelfService_EndDocPrinter_args() : hPrinter(0) {
  }

  virtual ~SelfService_EndDocPrinter_args() throw();
  int64_t hPrinter;

  _SelfService_EndDocPrinter_args__isset __isset;

  void __set_hPrinter(const int64_t val);

  bool operator == (const SelfService_EndDocPrinter_args & rhs) const
  {
    if (!(hPrinter == rhs.hPrinter))
      return false;
    return true;
  }
  bool operator != (const SelfService_EndDocPrinter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_EndDocPrinter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_EndDocPrinter_args& obj);
};


class SelfService_EndDocPrinter_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~SelfService_EndDocPrinter_pargs() throw();
  const int64_t* hPrinter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_EndDocPrinter_pargs& obj);
};

typedef struct _SelfService_EndDocPrinter_result__isset {
  _SelfService_EndDocPrinter_result__isset() : success(false) {}
  bool success :1;
} _SelfService_EndDocPrinter_result__isset;

class SelfService_EndDocPrinter_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  SelfService_EndDocPrinter_result(const SelfService_EndDocPrinter_result&);
  SelfService_EndDocPrinter_result& operator=(const SelfService_EndDocPrinter_result&);
  SelfService_EndDocPrinter_result() : success(0) {
  }

  virtual ~SelfService_EndDocPrinter_result() throw();
  bool success;

  _SelfService_EndDocPrinter_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SelfService_EndDocPrinter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_EndDocPrinter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_EndDocPrinter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_EndDocPrinter_result& obj);
};

typedef struct _SelfService_EndDocPrinter_presult__isset {
  _SelfService_EndDocPrinter_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_EndDocPrinter_presult__isset;

class SelfService_EndDocPrinter_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~SelfService_EndDocPrinter_presult() throw();
  bool* success;

  _SelfService_EndDocPrinter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_EndDocPrinter_presult& obj);
};

typedef struct _SelfService_ClosePrinter_args__isset {
  _SelfService_ClosePrinter_args__isset() : hPrinter(false) {}
  bool hPrinter :1;
} _SelfService_ClosePrinter_args__isset;

class SelfService_ClosePrinter_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  SelfService_ClosePrinter_args(const SelfService_ClosePrinter_args&);
  SelfService_ClosePrinter_args& operator=(const SelfService_ClosePrinter_args&);
  SelfService_ClosePrinter_args() : hPrinter(0) {
  }

  virtual ~SelfService_ClosePrinter_args() throw();
  int64_t hPrinter;

  _SelfService_ClosePrinter_args__isset __isset;

  void __set_hPrinter(const int64_t val);

  bool operator == (const SelfService_ClosePrinter_args & rhs) const
  {
    if (!(hPrinter == rhs.hPrinter))
      return false;
    return true;
  }
  bool operator != (const SelfService_ClosePrinter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_ClosePrinter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_ClosePrinter_args& obj);
};


class SelfService_ClosePrinter_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~SelfService_ClosePrinter_pargs() throw();
  const int64_t* hPrinter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_ClosePrinter_pargs& obj);
};

typedef struct _SelfService_ClosePrinter_result__isset {
  _SelfService_ClosePrinter_result__isset() : success(false) {}
  bool success :1;
} _SelfService_ClosePrinter_result__isset;

class SelfService_ClosePrinter_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  SelfService_ClosePrinter_result(const SelfService_ClosePrinter_result&);
  SelfService_ClosePrinter_result& operator=(const SelfService_ClosePrinter_result&);
  SelfService_ClosePrinter_result() : success(0) {
  }

  virtual ~SelfService_ClosePrinter_result() throw();
  bool success;

  _SelfService_ClosePrinter_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SelfService_ClosePrinter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_ClosePrinter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_ClosePrinter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_ClosePrinter_result& obj);
};

typedef struct _SelfService_ClosePrinter_presult__isset {
  _SelfService_ClosePrinter_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_ClosePrinter_presult__isset;

class SelfService_ClosePrinter_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~SelfService_ClosePrinter_presult() throw();
  bool* success;

  _SelfService_ClosePrinter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_ClosePrinter_presult& obj);
};

typedef struct _SelfService_CloseSpoolFileHandle_args__isset {
  _SelfService_CloseSpoolFileHandle_args__isset() : hPrinter(false), hSpoolFile(false) {}
  bool hPrinter :1;
  bool hSpoolFile :1;
} _SelfService_CloseSpoolFileHandle_args__isset;

class SelfService_CloseSpoolFileHandle_args {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  SelfService_CloseSpoolFileHandle_args(const SelfService_CloseSpoolFileHandle_args&);
  SelfService_CloseSpoolFileHandle_args& operator=(const SelfService_CloseSpoolFileHandle_args&);
  SelfService_CloseSpoolFileHandle_args() : hPrinter(0), hSpoolFile(0) {
  }

  virtual ~SelfService_CloseSpoolFileHandle_args() throw();
  int64_t hPrinter;
  int64_t hSpoolFile;

  _SelfService_CloseSpoolFileHandle_args__isset __isset;

  void __set_hPrinter(const int64_t val);

  void __set_hSpoolFile(const int64_t val);

  bool operator == (const SelfService_CloseSpoolFileHandle_args & rhs) const
  {
    if (!(hPrinter == rhs.hPrinter))
      return false;
    if (!(hSpoolFile == rhs.hSpoolFile))
      return false;
    return true;
  }
  bool operator != (const SelfService_CloseSpoolFileHandle_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_CloseSpoolFileHandle_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_CloseSpoolFileHandle_args& obj);
};


class SelfService_CloseSpoolFileHandle_pargs {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};


  virtual ~SelfService_CloseSpoolFileHandle_pargs() throw();
  const int64_t* hPrinter;
  const int64_t* hSpoolFile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_CloseSpoolFileHandle_pargs& obj);
};

typedef struct _SelfService_CloseSpoolFileHandle_result__isset {
  _SelfService_CloseSpoolFileHandle_result__isset() : success(false) {}
  bool success :1;
} _SelfService_CloseSpoolFileHandle_result__isset;

class SelfService_CloseSpoolFileHandle_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  SelfService_CloseSpoolFileHandle_result(const SelfService_CloseSpoolFileHandle_result&);
  SelfService_CloseSpoolFileHandle_result& operator=(const SelfService_CloseSpoolFileHandle_result&);
  SelfService_CloseSpoolFileHandle_result() : success(0) {
  }

  virtual ~SelfService_CloseSpoolFileHandle_result() throw();
  bool success;

  _SelfService_CloseSpoolFileHandle_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SelfService_CloseSpoolFileHandle_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_CloseSpoolFileHandle_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_CloseSpoolFileHandle_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_CloseSpoolFileHandle_result& obj);
};

typedef struct _SelfService_CloseSpoolFileHandle_presult__isset {
  _SelfService_CloseSpoolFileHandle_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_CloseSpoolFileHandle_presult__isset;

class SelfService_CloseSpoolFileHandle_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~SelfService_CloseSpoolFileHandle_presult() throw();
  bool* success;

  _SelfService_CloseSpoolFileHandle_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_CloseSpoolFileHandle_presult& obj);
};

typedef struct _SelfService_CommitSpoolData_args__isset {
  _SelfService_CommitSpoolData_args__isset() : hPrinter(false), hSpoolFile(false), cbCommit(false) {}
  bool hPrinter :1;
  bool hSpoolFile :1;
  bool cbCommit :1;
} _SelfService_CommitSpoolData_args__isset;

class SelfService_CommitSpoolData_args {
 public:

  static const char* ascii_fingerprint; // = "9763B9D124C8339490EA9AA9EB582188";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0x63,0xB9,0xD1,0x24,0xC8,0x33,0x94,0x90,0xEA,0x9A,0xA9,0xEB,0x58,0x21,0x88};

  SelfService_CommitSpoolData_args(const SelfService_CommitSpoolData_args&);
  SelfService_CommitSpoolData_args& operator=(const SelfService_CommitSpoolData_args&);
  SelfService_CommitSpoolData_args() : hPrinter(0), hSpoolFile(0), cbCommit(0) {
  }

  virtual ~SelfService_CommitSpoolData_args() throw();
  int64_t hPrinter;
  int64_t hSpoolFile;
  int32_t cbCommit;

  _SelfService_CommitSpoolData_args__isset __isset;

  void __set_hPrinter(const int64_t val);

  void __set_hSpoolFile(const int64_t val);

  void __set_cbCommit(const int32_t val);

  bool operator == (const SelfService_CommitSpoolData_args & rhs) const
  {
    if (!(hPrinter == rhs.hPrinter))
      return false;
    if (!(hSpoolFile == rhs.hSpoolFile))
      return false;
    if (!(cbCommit == rhs.cbCommit))
      return false;
    return true;
  }
  bool operator != (const SelfService_CommitSpoolData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_CommitSpoolData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_CommitSpoolData_args& obj);
};


class SelfService_CommitSpoolData_pargs {
 public:

  static const char* ascii_fingerprint; // = "9763B9D124C8339490EA9AA9EB582188";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0x63,0xB9,0xD1,0x24,0xC8,0x33,0x94,0x90,0xEA,0x9A,0xA9,0xEB,0x58,0x21,0x88};


  virtual ~SelfService_CommitSpoolData_pargs() throw();
  const int64_t* hPrinter;
  const int64_t* hSpoolFile;
  const int32_t* cbCommit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_CommitSpoolData_pargs& obj);
};

typedef struct _SelfService_CommitSpoolData_result__isset {
  _SelfService_CommitSpoolData_result__isset() : success(false) {}
  bool success :1;
} _SelfService_CommitSpoolData_result__isset;

class SelfService_CommitSpoolData_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  SelfService_CommitSpoolData_result(const SelfService_CommitSpoolData_result&);
  SelfService_CommitSpoolData_result& operator=(const SelfService_CommitSpoolData_result&);
  SelfService_CommitSpoolData_result() : success(0) {
  }

  virtual ~SelfService_CommitSpoolData_result() throw();
  int64_t success;

  _SelfService_CommitSpoolData_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const SelfService_CommitSpoolData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_CommitSpoolData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_CommitSpoolData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_CommitSpoolData_result& obj);
};

typedef struct _SelfService_CommitSpoolData_presult__isset {
  _SelfService_CommitSpoolData_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_CommitSpoolData_presult__isset;

class SelfService_CommitSpoolData_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~SelfService_CommitSpoolData_presult() throw();
  int64_t* success;

  _SelfService_CommitSpoolData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_CommitSpoolData_presult& obj);
};

typedef struct _SelfService_DocumentEvent_args__isset {
  _SelfService_DocumentEvent_args__isset() : hPrinter(false), hdc(false), iEsc(false), cbIn(false), pvIn(false), cbOut(false), pvOut(false) {}
  bool hPrinter :1;
  bool hdc :1;
  bool iEsc :1;
  bool cbIn :1;
  bool pvIn :1;
  bool cbOut :1;
  bool pvOut :1;
} _SelfService_DocumentEvent_args__isset;

class SelfService_DocumentEvent_args {
 public:

  static const char* ascii_fingerprint; // = "7EB5B474B8256C0115B241AFC49EC765";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0xB5,0xB4,0x74,0xB8,0x25,0x6C,0x01,0x15,0xB2,0x41,0xAF,0xC4,0x9E,0xC7,0x65};

  SelfService_DocumentEvent_args(const SelfService_DocumentEvent_args&);
  SelfService_DocumentEvent_args& operator=(const SelfService_DocumentEvent_args&);
  SelfService_DocumentEvent_args() : hPrinter(0), hdc(0), iEsc(0), cbIn(0), pvIn(), cbOut(0), pvOut() {
  }

  virtual ~SelfService_DocumentEvent_args() throw();
  int64_t hPrinter;
  int64_t hdc;
  int32_t iEsc;
  int32_t cbIn;
  std::string pvIn;
  int32_t cbOut;
  std::string pvOut;

  _SelfService_DocumentEvent_args__isset __isset;

  void __set_hPrinter(const int64_t val);

  void __set_hdc(const int64_t val);

  void __set_iEsc(const int32_t val);

  void __set_cbIn(const int32_t val);

  void __set_pvIn(const std::string& val);

  void __set_cbOut(const int32_t val);

  void __set_pvOut(const std::string& val);

  bool operator == (const SelfService_DocumentEvent_args & rhs) const
  {
    if (!(hPrinter == rhs.hPrinter))
      return false;
    if (!(hdc == rhs.hdc))
      return false;
    if (!(iEsc == rhs.iEsc))
      return false;
    if (!(cbIn == rhs.cbIn))
      return false;
    if (!(pvIn == rhs.pvIn))
      return false;
    if (!(cbOut == rhs.cbOut))
      return false;
    if (!(pvOut == rhs.pvOut))
      return false;
    return true;
  }
  bool operator != (const SelfService_DocumentEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_DocumentEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_DocumentEvent_args& obj);
};


class SelfService_DocumentEvent_pargs {
 public:

  static const char* ascii_fingerprint; // = "7EB5B474B8256C0115B241AFC49EC765";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0xB5,0xB4,0x74,0xB8,0x25,0x6C,0x01,0x15,0xB2,0x41,0xAF,0xC4,0x9E,0xC7,0x65};


  virtual ~SelfService_DocumentEvent_pargs() throw();
  const int64_t* hPrinter;
  const int64_t* hdc;
  const int32_t* iEsc;
  const int32_t* cbIn;
  const std::string* pvIn;
  const int32_t* cbOut;
  const std::string* pvOut;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_DocumentEvent_pargs& obj);
};

typedef struct _SelfService_DocumentEvent_result__isset {
  _SelfService_DocumentEvent_result__isset() : success(false) {}
  bool success :1;
} _SelfService_DocumentEvent_result__isset;

class SelfService_DocumentEvent_result {
 public:

  static const char* ascii_fingerprint; // = "7722CAB26D5D8252F8DAEA54B25BC179";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x22,0xCA,0xB2,0x6D,0x5D,0x82,0x52,0xF8,0xDA,0xEA,0x54,0xB2,0x5B,0xC1,0x79};

  SelfService_DocumentEvent_result(const SelfService_DocumentEvent_result&);
  SelfService_DocumentEvent_result& operator=(const SelfService_DocumentEvent_result&);
  SelfService_DocumentEvent_result() {
  }

  virtual ~SelfService_DocumentEvent_result() throw();
  std::map<std::string, std::string>  success;

  _SelfService_DocumentEvent_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  bool operator == (const SelfService_DocumentEvent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_DocumentEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_DocumentEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_DocumentEvent_result& obj);
};

typedef struct _SelfService_DocumentEvent_presult__isset {
  _SelfService_DocumentEvent_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_DocumentEvent_presult__isset;

class SelfService_DocumentEvent_presult {
 public:

  static const char* ascii_fingerprint; // = "7722CAB26D5D8252F8DAEA54B25BC179";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x22,0xCA,0xB2,0x6D,0x5D,0x82,0x52,0xF8,0xDA,0xEA,0x54,0xB2,0x5B,0xC1,0x79};


  virtual ~SelfService_DocumentEvent_presult() throw();
  std::map<std::string, std::string> * success;

  _SelfService_DocumentEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_DocumentEvent_presult& obj);
};

typedef struct _SelfService_DocumentPropertiesW_args__isset {
  _SelfService_DocumentPropertiesW_args__isset() : hWnd(false), hPrinter(false), pDeviceName(false), pDevModeInput(false), fMode(false) {}
  bool hWnd :1;
  bool hPrinter :1;
  bool pDeviceName :1;
  bool pDevModeInput :1;
  bool fMode :1;
} _SelfService_DocumentPropertiesW_args__isset;

class SelfService_DocumentPropertiesW_args {
 public:

  static const char* ascii_fingerprint; // = "3CCE31DC2CDC78072128AF8809E796EC";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0xCE,0x31,0xDC,0x2C,0xDC,0x78,0x07,0x21,0x28,0xAF,0x88,0x09,0xE7,0x96,0xEC};

  SelfService_DocumentPropertiesW_args(const SelfService_DocumentPropertiesW_args&);
  SelfService_DocumentPropertiesW_args& operator=(const SelfService_DocumentPropertiesW_args&);
  SelfService_DocumentPropertiesW_args() : hWnd(0), hPrinter(0), pDeviceName(), pDevModeInput(), fMode(0) {
  }

  virtual ~SelfService_DocumentPropertiesW_args() throw();
  int64_t hWnd;
  int64_t hPrinter;
  std::string pDeviceName;
  std::string pDevModeInput;
  int32_t fMode;

  _SelfService_DocumentPropertiesW_args__isset __isset;

  void __set_hWnd(const int64_t val);

  void __set_hPrinter(const int64_t val);

  void __set_pDeviceName(const std::string& val);

  void __set_pDevModeInput(const std::string& val);

  void __set_fMode(const int32_t val);

  bool operator == (const SelfService_DocumentPropertiesW_args & rhs) const
  {
    if (!(hWnd == rhs.hWnd))
      return false;
    if (!(hPrinter == rhs.hPrinter))
      return false;
    if (!(pDeviceName == rhs.pDeviceName))
      return false;
    if (!(pDevModeInput == rhs.pDevModeInput))
      return false;
    if (!(fMode == rhs.fMode))
      return false;
    return true;
  }
  bool operator != (const SelfService_DocumentPropertiesW_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_DocumentPropertiesW_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_DocumentPropertiesW_args& obj);
};


class SelfService_DocumentPropertiesW_pargs {
 public:

  static const char* ascii_fingerprint; // = "3CCE31DC2CDC78072128AF8809E796EC";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0xCE,0x31,0xDC,0x2C,0xDC,0x78,0x07,0x21,0x28,0xAF,0x88,0x09,0xE7,0x96,0xEC};


  virtual ~SelfService_DocumentPropertiesW_pargs() throw();
  const int64_t* hWnd;
  const int64_t* hPrinter;
  const std::string* pDeviceName;
  const std::string* pDevModeInput;
  const int32_t* fMode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_DocumentPropertiesW_pargs& obj);
};

typedef struct _SelfService_DocumentPropertiesW_result__isset {
  _SelfService_DocumentPropertiesW_result__isset() : success(false) {}
  bool success :1;
} _SelfService_DocumentPropertiesW_result__isset;

class SelfService_DocumentPropertiesW_result {
 public:

  static const char* ascii_fingerprint; // = "7722CAB26D5D8252F8DAEA54B25BC179";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x22,0xCA,0xB2,0x6D,0x5D,0x82,0x52,0xF8,0xDA,0xEA,0x54,0xB2,0x5B,0xC1,0x79};

  SelfService_DocumentPropertiesW_result(const SelfService_DocumentPropertiesW_result&);
  SelfService_DocumentPropertiesW_result& operator=(const SelfService_DocumentPropertiesW_result&);
  SelfService_DocumentPropertiesW_result() {
  }

  virtual ~SelfService_DocumentPropertiesW_result() throw();
  std::map<std::string, std::string>  success;

  _SelfService_DocumentPropertiesW_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  bool operator == (const SelfService_DocumentPropertiesW_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_DocumentPropertiesW_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_DocumentPropertiesW_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_DocumentPropertiesW_result& obj);
};

typedef struct _SelfService_DocumentPropertiesW_presult__isset {
  _SelfService_DocumentPropertiesW_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_DocumentPropertiesW_presult__isset;

class SelfService_DocumentPropertiesW_presult {
 public:

  static const char* ascii_fingerprint; // = "7722CAB26D5D8252F8DAEA54B25BC179";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x22,0xCA,0xB2,0x6D,0x5D,0x82,0x52,0xF8,0xDA,0xEA,0x54,0xB2,0x5B,0xC1,0x79};


  virtual ~SelfService_DocumentPropertiesW_presult() throw();
  std::map<std::string, std::string> * success;

  _SelfService_DocumentPropertiesW_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_DocumentPropertiesW_presult& obj);
};

typedef struct _SelfService_EnumFormsW_args__isset {
  _SelfService_EnumFormsW_args__isset() : hPrinter(false), Level(false), cbBuf(false) {}
  bool hPrinter :1;
  bool Level :1;
  bool cbBuf :1;
} _SelfService_EnumFormsW_args__isset;

class SelfService_EnumFormsW_args {
 public:

  static const char* ascii_fingerprint; // = "9C4E30169AD9E0914633984FE5C16314";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

  SelfService_EnumFormsW_args(const SelfService_EnumFormsW_args&);
  SelfService_EnumFormsW_args& operator=(const SelfService_EnumFormsW_args&);
  SelfService_EnumFormsW_args() : hPrinter(0), Level(0), cbBuf(0) {
  }

  virtual ~SelfService_EnumFormsW_args() throw();
  int64_t hPrinter;
  int32_t Level;
  int32_t cbBuf;

  _SelfService_EnumFormsW_args__isset __isset;

  void __set_hPrinter(const int64_t val);

  void __set_Level(const int32_t val);

  void __set_cbBuf(const int32_t val);

  bool operator == (const SelfService_EnumFormsW_args & rhs) const
  {
    if (!(hPrinter == rhs.hPrinter))
      return false;
    if (!(Level == rhs.Level))
      return false;
    if (!(cbBuf == rhs.cbBuf))
      return false;
    return true;
  }
  bool operator != (const SelfService_EnumFormsW_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_EnumFormsW_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_EnumFormsW_args& obj);
};


class SelfService_EnumFormsW_pargs {
 public:

  static const char* ascii_fingerprint; // = "9C4E30169AD9E0914633984FE5C16314";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};


  virtual ~SelfService_EnumFormsW_pargs() throw();
  const int64_t* hPrinter;
  const int32_t* Level;
  const int32_t* cbBuf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_EnumFormsW_pargs& obj);
};

typedef struct _SelfService_EnumFormsW_result__isset {
  _SelfService_EnumFormsW_result__isset() : success(false) {}
  bool success :1;
} _SelfService_EnumFormsW_result__isset;

class SelfService_EnumFormsW_result {
 public:

  static const char* ascii_fingerprint; // = "7722CAB26D5D8252F8DAEA54B25BC179";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x22,0xCA,0xB2,0x6D,0x5D,0x82,0x52,0xF8,0xDA,0xEA,0x54,0xB2,0x5B,0xC1,0x79};

  SelfService_EnumFormsW_result(const SelfService_EnumFormsW_result&);
  SelfService_EnumFormsW_result& operator=(const SelfService_EnumFormsW_result&);
  SelfService_EnumFormsW_result() {
  }

  virtual ~SelfService_EnumFormsW_result() throw();
  std::map<std::string, std::string>  success;

  _SelfService_EnumFormsW_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  bool operator == (const SelfService_EnumFormsW_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_EnumFormsW_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_EnumFormsW_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_EnumFormsW_result& obj);
};

typedef struct _SelfService_EnumFormsW_presult__isset {
  _SelfService_EnumFormsW_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_EnumFormsW_presult__isset;

class SelfService_EnumFormsW_presult {
 public:

  static const char* ascii_fingerprint; // = "7722CAB26D5D8252F8DAEA54B25BC179";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x22,0xCA,0xB2,0x6D,0x5D,0x82,0x52,0xF8,0xDA,0xEA,0x54,0xB2,0x5B,0xC1,0x79};


  virtual ~SelfService_EnumFormsW_presult() throw();
  std::map<std::string, std::string> * success;

  _SelfService_EnumFormsW_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_EnumFormsW_presult& obj);
};

typedef struct _SelfService_EnumPrintersW_args__isset {
  _SelfService_EnumPrintersW_args__isset() : Flags(false), Name(false), Level(false), cbBuf(false) {}
  bool Flags :1;
  bool Name :1;
  bool Level :1;
  bool cbBuf :1;
} _SelfService_EnumPrintersW_args__isset;

class SelfService_EnumPrintersW_args {
 public:

  static const char* ascii_fingerprint; // = "AD5E8581BBE4C3CDE5FC5930DA3DD601";
  static const uint8_t binary_fingerprint[16]; // = {0xAD,0x5E,0x85,0x81,0xBB,0xE4,0xC3,0xCD,0xE5,0xFC,0x59,0x30,0xDA,0x3D,0xD6,0x01};

  SelfService_EnumPrintersW_args(const SelfService_EnumPrintersW_args&);
  SelfService_EnumPrintersW_args& operator=(const SelfService_EnumPrintersW_args&);
  SelfService_EnumPrintersW_args() : Flags(0), Name(), Level(0), cbBuf(0) {
  }

  virtual ~SelfService_EnumPrintersW_args() throw();
  int32_t Flags;
  std::string Name;
  int32_t Level;
  int32_t cbBuf;

  _SelfService_EnumPrintersW_args__isset __isset;

  void __set_Flags(const int32_t val);

  void __set_Name(const std::string& val);

  void __set_Level(const int32_t val);

  void __set_cbBuf(const int32_t val);

  bool operator == (const SelfService_EnumPrintersW_args & rhs) const
  {
    if (!(Flags == rhs.Flags))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Level == rhs.Level))
      return false;
    if (!(cbBuf == rhs.cbBuf))
      return false;
    return true;
  }
  bool operator != (const SelfService_EnumPrintersW_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_EnumPrintersW_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_EnumPrintersW_args& obj);
};


class SelfService_EnumPrintersW_pargs {
 public:

  static const char* ascii_fingerprint; // = "AD5E8581BBE4C3CDE5FC5930DA3DD601";
  static const uint8_t binary_fingerprint[16]; // = {0xAD,0x5E,0x85,0x81,0xBB,0xE4,0xC3,0xCD,0xE5,0xFC,0x59,0x30,0xDA,0x3D,0xD6,0x01};


  virtual ~SelfService_EnumPrintersW_pargs() throw();
  const int32_t* Flags;
  const std::string* Name;
  const int32_t* Level;
  const int32_t* cbBuf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_EnumPrintersW_pargs& obj);
};

typedef struct _SelfService_EnumPrintersW_result__isset {
  _SelfService_EnumPrintersW_result__isset() : success(false) {}
  bool success :1;
} _SelfService_EnumPrintersW_result__isset;

class SelfService_EnumPrintersW_result {
 public:

  static const char* ascii_fingerprint; // = "7722CAB26D5D8252F8DAEA54B25BC179";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x22,0xCA,0xB2,0x6D,0x5D,0x82,0x52,0xF8,0xDA,0xEA,0x54,0xB2,0x5B,0xC1,0x79};

  SelfService_EnumPrintersW_result(const SelfService_EnumPrintersW_result&);
  SelfService_EnumPrintersW_result& operator=(const SelfService_EnumPrintersW_result&);
  SelfService_EnumPrintersW_result() {
  }

  virtual ~SelfService_EnumPrintersW_result() throw();
  std::map<std::string, std::string>  success;

  _SelfService_EnumPrintersW_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  bool operator == (const SelfService_EnumPrintersW_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_EnumPrintersW_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_EnumPrintersW_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_EnumPrintersW_result& obj);
};

typedef struct _SelfService_EnumPrintersW_presult__isset {
  _SelfService_EnumPrintersW_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_EnumPrintersW_presult__isset;

class SelfService_EnumPrintersW_presult {
 public:

  static const char* ascii_fingerprint; // = "7722CAB26D5D8252F8DAEA54B25BC179";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x22,0xCA,0xB2,0x6D,0x5D,0x82,0x52,0xF8,0xDA,0xEA,0x54,0xB2,0x5B,0xC1,0x79};


  virtual ~SelfService_EnumPrintersW_presult() throw();
  std::map<std::string, std::string> * success;

  _SelfService_EnumPrintersW_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_EnumPrintersW_presult& obj);
};

typedef struct _SelfService_FindClosePrinterChangeNotification_args__isset {
  _SelfService_FindClosePrinterChangeNotification_args__isset() : hChange(false) {}
  bool hChange :1;
} _SelfService_FindClosePrinterChangeNotification_args__isset;

class SelfService_FindClosePrinterChangeNotification_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  SelfService_FindClosePrinterChangeNotification_args(const SelfService_FindClosePrinterChangeNotification_args&);
  SelfService_FindClosePrinterChangeNotification_args& operator=(const SelfService_FindClosePrinterChangeNotification_args&);
  SelfService_FindClosePrinterChangeNotification_args() : hChange(0) {
  }

  virtual ~SelfService_FindClosePrinterChangeNotification_args() throw();
  int64_t hChange;

  _SelfService_FindClosePrinterChangeNotification_args__isset __isset;

  void __set_hChange(const int64_t val);

  bool operator == (const SelfService_FindClosePrinterChangeNotification_args & rhs) const
  {
    if (!(hChange == rhs.hChange))
      return false;
    return true;
  }
  bool operator != (const SelfService_FindClosePrinterChangeNotification_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_FindClosePrinterChangeNotification_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_FindClosePrinterChangeNotification_args& obj);
};


class SelfService_FindClosePrinterChangeNotification_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~SelfService_FindClosePrinterChangeNotification_pargs() throw();
  const int64_t* hChange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_FindClosePrinterChangeNotification_pargs& obj);
};

typedef struct _SelfService_FindClosePrinterChangeNotification_result__isset {
  _SelfService_FindClosePrinterChangeNotification_result__isset() : success(false) {}
  bool success :1;
} _SelfService_FindClosePrinterChangeNotification_result__isset;

class SelfService_FindClosePrinterChangeNotification_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  SelfService_FindClosePrinterChangeNotification_result(const SelfService_FindClosePrinterChangeNotification_result&);
  SelfService_FindClosePrinterChangeNotification_result& operator=(const SelfService_FindClosePrinterChangeNotification_result&);
  SelfService_FindClosePrinterChangeNotification_result() : success(0) {
  }

  virtual ~SelfService_FindClosePrinterChangeNotification_result() throw();
  bool success;

  _SelfService_FindClosePrinterChangeNotification_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SelfService_FindClosePrinterChangeNotification_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_FindClosePrinterChangeNotification_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_FindClosePrinterChangeNotification_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_FindClosePrinterChangeNotification_result& obj);
};

typedef struct _SelfService_FindClosePrinterChangeNotification_presult__isset {
  _SelfService_FindClosePrinterChangeNotification_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_FindClosePrinterChangeNotification_presult__isset;

class SelfService_FindClosePrinterChangeNotification_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~SelfService_FindClosePrinterChangeNotification_presult() throw();
  bool* success;

  _SelfService_FindClosePrinterChangeNotification_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_FindClosePrinterChangeNotification_presult& obj);
};

typedef struct _SelfService_FindFirstPrinterChangeNotification_args__isset {
  _SelfService_FindFirstPrinterChangeNotification_args__isset() : hPrinter(false), fdwFilter(false), fdwOptions(false), pPrinterNotifyOptions(false) {}
  bool hPrinter :1;
  bool fdwFilter :1;
  bool fdwOptions :1;
  bool pPrinterNotifyOptions :1;
} _SelfService_FindFirstPrinterChangeNotification_args__isset;

class SelfService_FindFirstPrinterChangeNotification_args {
 public:

  static const char* ascii_fingerprint; // = "4E01B0A8274ACA54BD5DFC0DD9D03758";
  static const uint8_t binary_fingerprint[16]; // = {0x4E,0x01,0xB0,0xA8,0x27,0x4A,0xCA,0x54,0xBD,0x5D,0xFC,0x0D,0xD9,0xD0,0x37,0x58};

  SelfService_FindFirstPrinterChangeNotification_args(const SelfService_FindFirstPrinterChangeNotification_args&);
  SelfService_FindFirstPrinterChangeNotification_args& operator=(const SelfService_FindFirstPrinterChangeNotification_args&);
  SelfService_FindFirstPrinterChangeNotification_args() : hPrinter(0), fdwFilter(0), fdwOptions(0), pPrinterNotifyOptions() {
  }

  virtual ~SelfService_FindFirstPrinterChangeNotification_args() throw();
  int64_t hPrinter;
  int32_t fdwFilter;
  int32_t fdwOptions;
  std::string pPrinterNotifyOptions;

  _SelfService_FindFirstPrinterChangeNotification_args__isset __isset;

  void __set_hPrinter(const int64_t val);

  void __set_fdwFilter(const int32_t val);

  void __set_fdwOptions(const int32_t val);

  void __set_pPrinterNotifyOptions(const std::string& val);

  bool operator == (const SelfService_FindFirstPrinterChangeNotification_args & rhs) const
  {
    if (!(hPrinter == rhs.hPrinter))
      return false;
    if (!(fdwFilter == rhs.fdwFilter))
      return false;
    if (!(fdwOptions == rhs.fdwOptions))
      return false;
    if (!(pPrinterNotifyOptions == rhs.pPrinterNotifyOptions))
      return false;
    return true;
  }
  bool operator != (const SelfService_FindFirstPrinterChangeNotification_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_FindFirstPrinterChangeNotification_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_FindFirstPrinterChangeNotification_args& obj);
};


class SelfService_FindFirstPrinterChangeNotification_pargs {
 public:

  static const char* ascii_fingerprint; // = "4E01B0A8274ACA54BD5DFC0DD9D03758";
  static const uint8_t binary_fingerprint[16]; // = {0x4E,0x01,0xB0,0xA8,0x27,0x4A,0xCA,0x54,0xBD,0x5D,0xFC,0x0D,0xD9,0xD0,0x37,0x58};


  virtual ~SelfService_FindFirstPrinterChangeNotification_pargs() throw();
  const int64_t* hPrinter;
  const int32_t* fdwFilter;
  const int32_t* fdwOptions;
  const std::string* pPrinterNotifyOptions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_FindFirstPrinterChangeNotification_pargs& obj);
};

typedef struct _SelfService_FindFirstPrinterChangeNotification_result__isset {
  _SelfService_FindFirstPrinterChangeNotification_result__isset() : success(false) {}
  bool success :1;
} _SelfService_FindFirstPrinterChangeNotification_result__isset;

class SelfService_FindFirstPrinterChangeNotification_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  SelfService_FindFirstPrinterChangeNotification_result(const SelfService_FindFirstPrinterChangeNotification_result&);
  SelfService_FindFirstPrinterChangeNotification_result& operator=(const SelfService_FindFirstPrinterChangeNotification_result&);
  SelfService_FindFirstPrinterChangeNotification_result() : success(0) {
  }

  virtual ~SelfService_FindFirstPrinterChangeNotification_result() throw();
  int64_t success;

  _SelfService_FindFirstPrinterChangeNotification_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const SelfService_FindFirstPrinterChangeNotification_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_FindFirstPrinterChangeNotification_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_FindFirstPrinterChangeNotification_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_FindFirstPrinterChangeNotification_result& obj);
};

typedef struct _SelfService_FindFirstPrinterChangeNotification_presult__isset {
  _SelfService_FindFirstPrinterChangeNotification_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_FindFirstPrinterChangeNotification_presult__isset;

class SelfService_FindFirstPrinterChangeNotification_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~SelfService_FindFirstPrinterChangeNotification_presult() throw();
  int64_t* success;

  _SelfService_FindFirstPrinterChangeNotification_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_FindFirstPrinterChangeNotification_presult& obj);
};

typedef struct _SelfService_FindNextPrinterChangeNotification_args__isset {
  _SelfService_FindNextPrinterChangeNotification_args__isset() : hChange(false), pPrinterNotifyOptions(false) {}
  bool hChange :1;
  bool pPrinterNotifyOptions :1;
} _SelfService_FindNextPrinterChangeNotification_args__isset;

class SelfService_FindNextPrinterChangeNotification_args {
 public:

  static const char* ascii_fingerprint; // = "727CAEA8265A5DE67DBC931F55CD8753";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x7C,0xAE,0xA8,0x26,0x5A,0x5D,0xE6,0x7D,0xBC,0x93,0x1F,0x55,0xCD,0x87,0x53};

  SelfService_FindNextPrinterChangeNotification_args(const SelfService_FindNextPrinterChangeNotification_args&);
  SelfService_FindNextPrinterChangeNotification_args& operator=(const SelfService_FindNextPrinterChangeNotification_args&);
  SelfService_FindNextPrinterChangeNotification_args() : hChange(0), pPrinterNotifyOptions() {
  }

  virtual ~SelfService_FindNextPrinterChangeNotification_args() throw();
  int64_t hChange;
  std::string pPrinterNotifyOptions;

  _SelfService_FindNextPrinterChangeNotification_args__isset __isset;

  void __set_hChange(const int64_t val);

  void __set_pPrinterNotifyOptions(const std::string& val);

  bool operator == (const SelfService_FindNextPrinterChangeNotification_args & rhs) const
  {
    if (!(hChange == rhs.hChange))
      return false;
    if (!(pPrinterNotifyOptions == rhs.pPrinterNotifyOptions))
      return false;
    return true;
  }
  bool operator != (const SelfService_FindNextPrinterChangeNotification_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_FindNextPrinterChangeNotification_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_FindNextPrinterChangeNotification_args& obj);
};


class SelfService_FindNextPrinterChangeNotification_pargs {
 public:

  static const char* ascii_fingerprint; // = "727CAEA8265A5DE67DBC931F55CD8753";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x7C,0xAE,0xA8,0x26,0x5A,0x5D,0xE6,0x7D,0xBC,0x93,0x1F,0x55,0xCD,0x87,0x53};


  virtual ~SelfService_FindNextPrinterChangeNotification_pargs() throw();
  const int64_t* hChange;
  const std::string* pPrinterNotifyOptions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_FindNextPrinterChangeNotification_pargs& obj);
};

typedef struct _SelfService_FindNextPrinterChangeNotification_result__isset {
  _SelfService_FindNextPrinterChangeNotification_result__isset() : success(false) {}
  bool success :1;
} _SelfService_FindNextPrinterChangeNotification_result__isset;

class SelfService_FindNextPrinterChangeNotification_result {
 public:

  static const char* ascii_fingerprint; // = "7722CAB26D5D8252F8DAEA54B25BC179";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x22,0xCA,0xB2,0x6D,0x5D,0x82,0x52,0xF8,0xDA,0xEA,0x54,0xB2,0x5B,0xC1,0x79};

  SelfService_FindNextPrinterChangeNotification_result(const SelfService_FindNextPrinterChangeNotification_result&);
  SelfService_FindNextPrinterChangeNotification_result& operator=(const SelfService_FindNextPrinterChangeNotification_result&);
  SelfService_FindNextPrinterChangeNotification_result() {
  }

  virtual ~SelfService_FindNextPrinterChangeNotification_result() throw();
  std::map<std::string, std::string>  success;

  _SelfService_FindNextPrinterChangeNotification_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  bool operator == (const SelfService_FindNextPrinterChangeNotification_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_FindNextPrinterChangeNotification_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_FindNextPrinterChangeNotification_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_FindNextPrinterChangeNotification_result& obj);
};

typedef struct _SelfService_FindNextPrinterChangeNotification_presult__isset {
  _SelfService_FindNextPrinterChangeNotification_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_FindNextPrinterChangeNotification_presult__isset;

class SelfService_FindNextPrinterChangeNotification_presult {
 public:

  static const char* ascii_fingerprint; // = "7722CAB26D5D8252F8DAEA54B25BC179";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x22,0xCA,0xB2,0x6D,0x5D,0x82,0x52,0xF8,0xDA,0xEA,0x54,0xB2,0x5B,0xC1,0x79};


  virtual ~SelfService_FindNextPrinterChangeNotification_presult() throw();
  std::map<std::string, std::string> * success;

  _SelfService_FindNextPrinterChangeNotification_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_FindNextPrinterChangeNotification_presult& obj);
};

typedef struct _SelfService_FreePrinterNotifyInfo_args__isset {
  _SelfService_FreePrinterNotifyInfo_args__isset() : pPrinterNotifyInfo(false) {}
  bool pPrinterNotifyInfo :1;
} _SelfService_FreePrinterNotifyInfo_args__isset;

class SelfService_FreePrinterNotifyInfo_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  SelfService_FreePrinterNotifyInfo_args(const SelfService_FreePrinterNotifyInfo_args&);
  SelfService_FreePrinterNotifyInfo_args& operator=(const SelfService_FreePrinterNotifyInfo_args&);
  SelfService_FreePrinterNotifyInfo_args() : pPrinterNotifyInfo() {
  }

  virtual ~SelfService_FreePrinterNotifyInfo_args() throw();
  std::string pPrinterNotifyInfo;

  _SelfService_FreePrinterNotifyInfo_args__isset __isset;

  void __set_pPrinterNotifyInfo(const std::string& val);

  bool operator == (const SelfService_FreePrinterNotifyInfo_args & rhs) const
  {
    if (!(pPrinterNotifyInfo == rhs.pPrinterNotifyInfo))
      return false;
    return true;
  }
  bool operator != (const SelfService_FreePrinterNotifyInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_FreePrinterNotifyInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_FreePrinterNotifyInfo_args& obj);
};


class SelfService_FreePrinterNotifyInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~SelfService_FreePrinterNotifyInfo_pargs() throw();
  const std::string* pPrinterNotifyInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_FreePrinterNotifyInfo_pargs& obj);
};

typedef struct _SelfService_FreePrinterNotifyInfo_result__isset {
  _SelfService_FreePrinterNotifyInfo_result__isset() : success(false) {}
  bool success :1;
} _SelfService_FreePrinterNotifyInfo_result__isset;

class SelfService_FreePrinterNotifyInfo_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  SelfService_FreePrinterNotifyInfo_result(const SelfService_FreePrinterNotifyInfo_result&);
  SelfService_FreePrinterNotifyInfo_result& operator=(const SelfService_FreePrinterNotifyInfo_result&);
  SelfService_FreePrinterNotifyInfo_result() : success(0) {
  }

  virtual ~SelfService_FreePrinterNotifyInfo_result() throw();
  bool success;

  _SelfService_FreePrinterNotifyInfo_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SelfService_FreePrinterNotifyInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_FreePrinterNotifyInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_FreePrinterNotifyInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_FreePrinterNotifyInfo_result& obj);
};

typedef struct _SelfService_FreePrinterNotifyInfo_presult__isset {
  _SelfService_FreePrinterNotifyInfo_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_FreePrinterNotifyInfo_presult__isset;

class SelfService_FreePrinterNotifyInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~SelfService_FreePrinterNotifyInfo_presult() throw();
  bool* success;

  _SelfService_FreePrinterNotifyInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_FreePrinterNotifyInfo_presult& obj);
};

typedef struct _SelfService_GetDefaultPrinterW_args__isset {
  _SelfService_GetDefaultPrinterW_args__isset() : arg(false) {}
  bool arg :1;
} _SelfService_GetDefaultPrinterW_args__isset;

class SelfService_GetDefaultPrinterW_args {
 public:

  static const char* ascii_fingerprint; // = "6B2AF6463ECB7BAE4D236B8E0274278C";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0x2A,0xF6,0x46,0x3E,0xCB,0x7B,0xAE,0x4D,0x23,0x6B,0x8E,0x02,0x74,0x27,0x8C};

  SelfService_GetDefaultPrinterW_args(const SelfService_GetDefaultPrinterW_args&);
  SelfService_GetDefaultPrinterW_args& operator=(const SelfService_GetDefaultPrinterW_args&);
  SelfService_GetDefaultPrinterW_args() {
  }

  virtual ~SelfService_GetDefaultPrinterW_args() throw();
  ArgGetDefaultPrinterW arg;

  _SelfService_GetDefaultPrinterW_args__isset __isset;

  void __set_arg(const ArgGetDefaultPrinterW& val);

  bool operator == (const SelfService_GetDefaultPrinterW_args & rhs) const
  {
    if (!(arg == rhs.arg))
      return false;
    return true;
  }
  bool operator != (const SelfService_GetDefaultPrinterW_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_GetDefaultPrinterW_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_GetDefaultPrinterW_args& obj);
};


class SelfService_GetDefaultPrinterW_pargs {
 public:

  static const char* ascii_fingerprint; // = "6B2AF6463ECB7BAE4D236B8E0274278C";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0x2A,0xF6,0x46,0x3E,0xCB,0x7B,0xAE,0x4D,0x23,0x6B,0x8E,0x02,0x74,0x27,0x8C};


  virtual ~SelfService_GetDefaultPrinterW_pargs() throw();
  const ArgGetDefaultPrinterW* arg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_GetDefaultPrinterW_pargs& obj);
};

typedef struct _SelfService_GetDefaultPrinterW_result__isset {
  _SelfService_GetDefaultPrinterW_result__isset() : success(false) {}
  bool success :1;
} _SelfService_GetDefaultPrinterW_result__isset;

class SelfService_GetDefaultPrinterW_result {
 public:

  static const char* ascii_fingerprint; // = "33444990E9F7449CD4B2BB586C9D9D50";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x44,0x49,0x90,0xE9,0xF7,0x44,0x9C,0xD4,0xB2,0xBB,0x58,0x6C,0x9D,0x9D,0x50};

  SelfService_GetDefaultPrinterW_result(const SelfService_GetDefaultPrinterW_result&);
  SelfService_GetDefaultPrinterW_result& operator=(const SelfService_GetDefaultPrinterW_result&);
  SelfService_GetDefaultPrinterW_result() {
  }

  virtual ~SelfService_GetDefaultPrinterW_result() throw();
  ArgGetDefaultPrinterW success;

  _SelfService_GetDefaultPrinterW_result__isset __isset;

  void __set_success(const ArgGetDefaultPrinterW& val);

  bool operator == (const SelfService_GetDefaultPrinterW_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_GetDefaultPrinterW_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_GetDefaultPrinterW_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_GetDefaultPrinterW_result& obj);
};

typedef struct _SelfService_GetDefaultPrinterW_presult__isset {
  _SelfService_GetDefaultPrinterW_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_GetDefaultPrinterW_presult__isset;

class SelfService_GetDefaultPrinterW_presult {
 public:

  static const char* ascii_fingerprint; // = "33444990E9F7449CD4B2BB586C9D9D50";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x44,0x49,0x90,0xE9,0xF7,0x44,0x9C,0xD4,0xB2,0xBB,0x58,0x6C,0x9D,0x9D,0x50};


  virtual ~SelfService_GetDefaultPrinterW_presult() throw();
  ArgGetDefaultPrinterW* success;

  _SelfService_GetDefaultPrinterW_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_GetDefaultPrinterW_presult& obj);
};

typedef struct _SelfService_GetPrinterDataW_args__isset {
  _SelfService_GetPrinterDataW_args__isset() : hPrinter(false), pValueName(false), nSize(false) {}
  bool hPrinter :1;
  bool pValueName :1;
  bool nSize :1;
} _SelfService_GetPrinterDataW_args__isset;

class SelfService_GetPrinterDataW_args {
 public:

  static const char* ascii_fingerprint; // = "FA14FF3C297F6EBE2FC46FD846FF0E76";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x14,0xFF,0x3C,0x29,0x7F,0x6E,0xBE,0x2F,0xC4,0x6F,0xD8,0x46,0xFF,0x0E,0x76};

  SelfService_GetPrinterDataW_args(const SelfService_GetPrinterDataW_args&);
  SelfService_GetPrinterDataW_args& operator=(const SelfService_GetPrinterDataW_args&);
  SelfService_GetPrinterDataW_args() : hPrinter(0), pValueName(), nSize(0) {
  }

  virtual ~SelfService_GetPrinterDataW_args() throw();
  int64_t hPrinter;
  std::string pValueName;
  int32_t nSize;

  _SelfService_GetPrinterDataW_args__isset __isset;

  void __set_hPrinter(const int64_t val);

  void __set_pValueName(const std::string& val);

  void __set_nSize(const int32_t val);

  bool operator == (const SelfService_GetPrinterDataW_args & rhs) const
  {
    if (!(hPrinter == rhs.hPrinter))
      return false;
    if (!(pValueName == rhs.pValueName))
      return false;
    if (!(nSize == rhs.nSize))
      return false;
    return true;
  }
  bool operator != (const SelfService_GetPrinterDataW_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_GetPrinterDataW_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_GetPrinterDataW_args& obj);
};


class SelfService_GetPrinterDataW_pargs {
 public:

  static const char* ascii_fingerprint; // = "FA14FF3C297F6EBE2FC46FD846FF0E76";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x14,0xFF,0x3C,0x29,0x7F,0x6E,0xBE,0x2F,0xC4,0x6F,0xD8,0x46,0xFF,0x0E,0x76};


  virtual ~SelfService_GetPrinterDataW_pargs() throw();
  const int64_t* hPrinter;
  const std::string* pValueName;
  const int32_t* nSize;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_GetPrinterDataW_pargs& obj);
};

typedef struct _SelfService_GetPrinterDataW_result__isset {
  _SelfService_GetPrinterDataW_result__isset() : success(false) {}
  bool success :1;
} _SelfService_GetPrinterDataW_result__isset;

class SelfService_GetPrinterDataW_result {
 public:

  static const char* ascii_fingerprint; // = "7722CAB26D5D8252F8DAEA54B25BC179";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x22,0xCA,0xB2,0x6D,0x5D,0x82,0x52,0xF8,0xDA,0xEA,0x54,0xB2,0x5B,0xC1,0x79};

  SelfService_GetPrinterDataW_result(const SelfService_GetPrinterDataW_result&);
  SelfService_GetPrinterDataW_result& operator=(const SelfService_GetPrinterDataW_result&);
  SelfService_GetPrinterDataW_result() {
  }

  virtual ~SelfService_GetPrinterDataW_result() throw();
  std::map<std::string, std::string>  success;

  _SelfService_GetPrinterDataW_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  bool operator == (const SelfService_GetPrinterDataW_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_GetPrinterDataW_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_GetPrinterDataW_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_GetPrinterDataW_result& obj);
};

typedef struct _SelfService_GetPrinterDataW_presult__isset {
  _SelfService_GetPrinterDataW_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_GetPrinterDataW_presult__isset;

class SelfService_GetPrinterDataW_presult {
 public:

  static const char* ascii_fingerprint; // = "7722CAB26D5D8252F8DAEA54B25BC179";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x22,0xCA,0xB2,0x6D,0x5D,0x82,0x52,0xF8,0xDA,0xEA,0x54,0xB2,0x5B,0xC1,0x79};


  virtual ~SelfService_GetPrinterDataW_presult() throw();
  std::map<std::string, std::string> * success;

  _SelfService_GetPrinterDataW_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_GetPrinterDataW_presult& obj);
};

typedef struct _SelfService_GetPrinterDataExW_args__isset {
  _SelfService_GetPrinterDataExW_args__isset() : hPrinter(false), pKeyName(false), pValueName(false), nSize(false) {}
  bool hPrinter :1;
  bool pKeyName :1;
  bool pValueName :1;
  bool nSize :1;
} _SelfService_GetPrinterDataExW_args__isset;

class SelfService_GetPrinterDataExW_args {
 public:

  static const char* ascii_fingerprint; // = "F9FEBEDAE932A5E93BFCCC3F9908A236";
  static const uint8_t binary_fingerprint[16]; // = {0xF9,0xFE,0xBE,0xDA,0xE9,0x32,0xA5,0xE9,0x3B,0xFC,0xCC,0x3F,0x99,0x08,0xA2,0x36};

  SelfService_GetPrinterDataExW_args(const SelfService_GetPrinterDataExW_args&);
  SelfService_GetPrinterDataExW_args& operator=(const SelfService_GetPrinterDataExW_args&);
  SelfService_GetPrinterDataExW_args() : hPrinter(0), pKeyName(), pValueName(), nSize(0) {
  }

  virtual ~SelfService_GetPrinterDataExW_args() throw();
  int64_t hPrinter;
  std::string pKeyName;
  std::string pValueName;
  int32_t nSize;

  _SelfService_GetPrinterDataExW_args__isset __isset;

  void __set_hPrinter(const int64_t val);

  void __set_pKeyName(const std::string& val);

  void __set_pValueName(const std::string& val);

  void __set_nSize(const int32_t val);

  bool operator == (const SelfService_GetPrinterDataExW_args & rhs) const
  {
    if (!(hPrinter == rhs.hPrinter))
      return false;
    if (!(pKeyName == rhs.pKeyName))
      return false;
    if (!(pValueName == rhs.pValueName))
      return false;
    if (!(nSize == rhs.nSize))
      return false;
    return true;
  }
  bool operator != (const SelfService_GetPrinterDataExW_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_GetPrinterDataExW_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_GetPrinterDataExW_args& obj);
};


class SelfService_GetPrinterDataExW_pargs {
 public:

  static const char* ascii_fingerprint; // = "F9FEBEDAE932A5E93BFCCC3F9908A236";
  static const uint8_t binary_fingerprint[16]; // = {0xF9,0xFE,0xBE,0xDA,0xE9,0x32,0xA5,0xE9,0x3B,0xFC,0xCC,0x3F,0x99,0x08,0xA2,0x36};


  virtual ~SelfService_GetPrinterDataExW_pargs() throw();
  const int64_t* hPrinter;
  const std::string* pKeyName;
  const std::string* pValueName;
  const int32_t* nSize;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_GetPrinterDataExW_pargs& obj);
};

typedef struct _SelfService_GetPrinterDataExW_result__isset {
  _SelfService_GetPrinterDataExW_result__isset() : success(false) {}
  bool success :1;
} _SelfService_GetPrinterDataExW_result__isset;

class SelfService_GetPrinterDataExW_result {
 public:

  static const char* ascii_fingerprint; // = "7722CAB26D5D8252F8DAEA54B25BC179";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x22,0xCA,0xB2,0x6D,0x5D,0x82,0x52,0xF8,0xDA,0xEA,0x54,0xB2,0x5B,0xC1,0x79};

  SelfService_GetPrinterDataExW_result(const SelfService_GetPrinterDataExW_result&);
  SelfService_GetPrinterDataExW_result& operator=(const SelfService_GetPrinterDataExW_result&);
  SelfService_GetPrinterDataExW_result() {
  }

  virtual ~SelfService_GetPrinterDataExW_result() throw();
  std::map<std::string, std::string>  success;

  _SelfService_GetPrinterDataExW_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  bool operator == (const SelfService_GetPrinterDataExW_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_GetPrinterDataExW_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_GetPrinterDataExW_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_GetPrinterDataExW_result& obj);
};

typedef struct _SelfService_GetPrinterDataExW_presult__isset {
  _SelfService_GetPrinterDataExW_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_GetPrinterDataExW_presult__isset;

class SelfService_GetPrinterDataExW_presult {
 public:

  static const char* ascii_fingerprint; // = "7722CAB26D5D8252F8DAEA54B25BC179";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x22,0xCA,0xB2,0x6D,0x5D,0x82,0x52,0xF8,0xDA,0xEA,0x54,0xB2,0x5B,0xC1,0x79};


  virtual ~SelfService_GetPrinterDataExW_presult() throw();
  std::map<std::string, std::string> * success;

  _SelfService_GetPrinterDataExW_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_GetPrinterDataExW_presult& obj);
};

typedef struct _SelfService_GetPrinterW_args__isset {
  _SelfService_GetPrinterW_args__isset() : hPrinter(false), Level(false), cbBuf(false) {}
  bool hPrinter :1;
  bool Level :1;
  bool cbBuf :1;
} _SelfService_GetPrinterW_args__isset;

class SelfService_GetPrinterW_args {
 public:

  static const char* ascii_fingerprint; // = "9C4E30169AD9E0914633984FE5C16314";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

  SelfService_GetPrinterW_args(const SelfService_GetPrinterW_args&);
  SelfService_GetPrinterW_args& operator=(const SelfService_GetPrinterW_args&);
  SelfService_GetPrinterW_args() : hPrinter(0), Level(0), cbBuf(0) {
  }

  virtual ~SelfService_GetPrinterW_args() throw();
  int64_t hPrinter;
  int32_t Level;
  int32_t cbBuf;

  _SelfService_GetPrinterW_args__isset __isset;

  void __set_hPrinter(const int64_t val);

  void __set_Level(const int32_t val);

  void __set_cbBuf(const int32_t val);

  bool operator == (const SelfService_GetPrinterW_args & rhs) const
  {
    if (!(hPrinter == rhs.hPrinter))
      return false;
    if (!(Level == rhs.Level))
      return false;
    if (!(cbBuf == rhs.cbBuf))
      return false;
    return true;
  }
  bool operator != (const SelfService_GetPrinterW_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_GetPrinterW_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_GetPrinterW_args& obj);
};


class SelfService_GetPrinterW_pargs {
 public:

  static const char* ascii_fingerprint; // = "9C4E30169AD9E0914633984FE5C16314";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};


  virtual ~SelfService_GetPrinterW_pargs() throw();
  const int64_t* hPrinter;
  const int32_t* Level;
  const int32_t* cbBuf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_GetPrinterW_pargs& obj);
};

typedef struct _SelfService_GetPrinterW_result__isset {
  _SelfService_GetPrinterW_result__isset() : success(false) {}
  bool success :1;
} _SelfService_GetPrinterW_result__isset;

class SelfService_GetPrinterW_result {
 public:

  static const char* ascii_fingerprint; // = "7722CAB26D5D8252F8DAEA54B25BC179";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x22,0xCA,0xB2,0x6D,0x5D,0x82,0x52,0xF8,0xDA,0xEA,0x54,0xB2,0x5B,0xC1,0x79};

  SelfService_GetPrinterW_result(const SelfService_GetPrinterW_result&);
  SelfService_GetPrinterW_result& operator=(const SelfService_GetPrinterW_result&);
  SelfService_GetPrinterW_result() {
  }

  virtual ~SelfService_GetPrinterW_result() throw();
  std::map<std::string, std::string>  success;

  _SelfService_GetPrinterW_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  bool operator == (const SelfService_GetPrinterW_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_GetPrinterW_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_GetPrinterW_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_GetPrinterW_result& obj);
};

typedef struct _SelfService_GetPrinterW_presult__isset {
  _SelfService_GetPrinterW_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_GetPrinterW_presult__isset;

class SelfService_GetPrinterW_presult {
 public:

  static const char* ascii_fingerprint; // = "7722CAB26D5D8252F8DAEA54B25BC179";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x22,0xCA,0xB2,0x6D,0x5D,0x82,0x52,0xF8,0xDA,0xEA,0x54,0xB2,0x5B,0xC1,0x79};


  virtual ~SelfService_GetPrinterW_presult() throw();
  std::map<std::string, std::string> * success;

  _SelfService_GetPrinterW_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_GetPrinterW_presult& obj);
};

typedef struct _SelfService_GetSpoolFileHandle_args__isset {
  _SelfService_GetSpoolFileHandle_args__isset() : hPrinter(false) {}
  bool hPrinter :1;
} _SelfService_GetSpoolFileHandle_args__isset;

class SelfService_GetSpoolFileHandle_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  SelfService_GetSpoolFileHandle_args(const SelfService_GetSpoolFileHandle_args&);
  SelfService_GetSpoolFileHandle_args& operator=(const SelfService_GetSpoolFileHandle_args&);
  SelfService_GetSpoolFileHandle_args() : hPrinter(0) {
  }

  virtual ~SelfService_GetSpoolFileHandle_args() throw();
  int64_t hPrinter;

  _SelfService_GetSpoolFileHandle_args__isset __isset;

  void __set_hPrinter(const int64_t val);

  bool operator == (const SelfService_GetSpoolFileHandle_args & rhs) const
  {
    if (!(hPrinter == rhs.hPrinter))
      return false;
    return true;
  }
  bool operator != (const SelfService_GetSpoolFileHandle_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_GetSpoolFileHandle_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_GetSpoolFileHandle_args& obj);
};


class SelfService_GetSpoolFileHandle_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~SelfService_GetSpoolFileHandle_pargs() throw();
  const int64_t* hPrinter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_GetSpoolFileHandle_pargs& obj);
};

typedef struct _SelfService_GetSpoolFileHandle_result__isset {
  _SelfService_GetSpoolFileHandle_result__isset() : success(false) {}
  bool success :1;
} _SelfService_GetSpoolFileHandle_result__isset;

class SelfService_GetSpoolFileHandle_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  SelfService_GetSpoolFileHandle_result(const SelfService_GetSpoolFileHandle_result&);
  SelfService_GetSpoolFileHandle_result& operator=(const SelfService_GetSpoolFileHandle_result&);
  SelfService_GetSpoolFileHandle_result() : success(0) {
  }

  virtual ~SelfService_GetSpoolFileHandle_result() throw();
  int64_t success;

  _SelfService_GetSpoolFileHandle_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const SelfService_GetSpoolFileHandle_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_GetSpoolFileHandle_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_GetSpoolFileHandle_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_GetSpoolFileHandle_result& obj);
};

typedef struct _SelfService_GetSpoolFileHandle_presult__isset {
  _SelfService_GetSpoolFileHandle_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_GetSpoolFileHandle_presult__isset;

class SelfService_GetSpoolFileHandle_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~SelfService_GetSpoolFileHandle_presult() throw();
  int64_t* success;

  _SelfService_GetSpoolFileHandle_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_GetSpoolFileHandle_presult& obj);
};

typedef struct _SelfService_IsValidDevmodeW_args__isset {
  _SelfService_IsValidDevmodeW_args__isset() : pDevmode(false), DevmodeSize(false) {}
  bool pDevmode :1;
  bool DevmodeSize :1;
} _SelfService_IsValidDevmodeW_args__isset;

class SelfService_IsValidDevmodeW_args {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  SelfService_IsValidDevmodeW_args(const SelfService_IsValidDevmodeW_args&);
  SelfService_IsValidDevmodeW_args& operator=(const SelfService_IsValidDevmodeW_args&);
  SelfService_IsValidDevmodeW_args() : pDevmode(), DevmodeSize(0) {
  }

  virtual ~SelfService_IsValidDevmodeW_args() throw();
  std::string pDevmode;
  int32_t DevmodeSize;

  _SelfService_IsValidDevmodeW_args__isset __isset;

  void __set_pDevmode(const std::string& val);

  void __set_DevmodeSize(const int32_t val);

  bool operator == (const SelfService_IsValidDevmodeW_args & rhs) const
  {
    if (!(pDevmode == rhs.pDevmode))
      return false;
    if (!(DevmodeSize == rhs.DevmodeSize))
      return false;
    return true;
  }
  bool operator != (const SelfService_IsValidDevmodeW_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_IsValidDevmodeW_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_IsValidDevmodeW_args& obj);
};


class SelfService_IsValidDevmodeW_pargs {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};


  virtual ~SelfService_IsValidDevmodeW_pargs() throw();
  const std::string* pDevmode;
  const int32_t* DevmodeSize;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_IsValidDevmodeW_pargs& obj);
};

typedef struct _SelfService_IsValidDevmodeW_result__isset {
  _SelfService_IsValidDevmodeW_result__isset() : success(false) {}
  bool success :1;
} _SelfService_IsValidDevmodeW_result__isset;

class SelfService_IsValidDevmodeW_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  SelfService_IsValidDevmodeW_result(const SelfService_IsValidDevmodeW_result&);
  SelfService_IsValidDevmodeW_result& operator=(const SelfService_IsValidDevmodeW_result&);
  SelfService_IsValidDevmodeW_result() : success(0) {
  }

  virtual ~SelfService_IsValidDevmodeW_result() throw();
  bool success;

  _SelfService_IsValidDevmodeW_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SelfService_IsValidDevmodeW_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_IsValidDevmodeW_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_IsValidDevmodeW_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_IsValidDevmodeW_result& obj);
};

typedef struct _SelfService_IsValidDevmodeW_presult__isset {
  _SelfService_IsValidDevmodeW_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_IsValidDevmodeW_presult__isset;

class SelfService_IsValidDevmodeW_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~SelfService_IsValidDevmodeW_presult() throw();
  bool* success;

  _SelfService_IsValidDevmodeW_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_IsValidDevmodeW_presult& obj);
};

typedef struct _SelfService_OpenPrinter2W_args__isset {
  _SelfService_OpenPrinter2W_args__isset() : pPrinterName(false), pDefaultExist(false), pDatatype(false), pDevMode(false), DesiredAccess(false), pOptions(false) {}
  bool pPrinterName :1;
  bool pDefaultExist :1;
  bool pDatatype :1;
  bool pDevMode :1;
  bool DesiredAccess :1;
  bool pOptions :1;
} _SelfService_OpenPrinter2W_args__isset;

class SelfService_OpenPrinter2W_args {
 public:

  static const char* ascii_fingerprint; // = "326B0D7BBA9219D347218294DDAADA63";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x6B,0x0D,0x7B,0xBA,0x92,0x19,0xD3,0x47,0x21,0x82,0x94,0xDD,0xAA,0xDA,0x63};

  SelfService_OpenPrinter2W_args(const SelfService_OpenPrinter2W_args&);
  SelfService_OpenPrinter2W_args& operator=(const SelfService_OpenPrinter2W_args&);
  SelfService_OpenPrinter2W_args() : pPrinterName(), pDefaultExist(0), pDatatype(), pDevMode(), DesiredAccess(0), pOptions() {
  }

  virtual ~SelfService_OpenPrinter2W_args() throw();
  std::string pPrinterName;
  bool pDefaultExist;
  std::string pDatatype;
  std::string pDevMode;
  int32_t DesiredAccess;
  std::string pOptions;

  _SelfService_OpenPrinter2W_args__isset __isset;

  void __set_pPrinterName(const std::string& val);

  void __set_pDefaultExist(const bool val);

  void __set_pDatatype(const std::string& val);

  void __set_pDevMode(const std::string& val);

  void __set_DesiredAccess(const int32_t val);

  void __set_pOptions(const std::string& val);

  bool operator == (const SelfService_OpenPrinter2W_args & rhs) const
  {
    if (!(pPrinterName == rhs.pPrinterName))
      return false;
    if (!(pDefaultExist == rhs.pDefaultExist))
      return false;
    if (!(pDatatype == rhs.pDatatype))
      return false;
    if (!(pDevMode == rhs.pDevMode))
      return false;
    if (!(DesiredAccess == rhs.DesiredAccess))
      return false;
    if (!(pOptions == rhs.pOptions))
      return false;
    return true;
  }
  bool operator != (const SelfService_OpenPrinter2W_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_OpenPrinter2W_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_OpenPrinter2W_args& obj);
};


class SelfService_OpenPrinter2W_pargs {
 public:

  static const char* ascii_fingerprint; // = "326B0D7BBA9219D347218294DDAADA63";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x6B,0x0D,0x7B,0xBA,0x92,0x19,0xD3,0x47,0x21,0x82,0x94,0xDD,0xAA,0xDA,0x63};


  virtual ~SelfService_OpenPrinter2W_pargs() throw();
  const std::string* pPrinterName;
  const bool* pDefaultExist;
  const std::string* pDatatype;
  const std::string* pDevMode;
  const int32_t* DesiredAccess;
  const std::string* pOptions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_OpenPrinter2W_pargs& obj);
};

typedef struct _SelfService_OpenPrinter2W_result__isset {
  _SelfService_OpenPrinter2W_result__isset() : success(false) {}
  bool success :1;
} _SelfService_OpenPrinter2W_result__isset;

class SelfService_OpenPrinter2W_result {
 public:

  static const char* ascii_fingerprint; // = "8EBD4692F4235543421FE18D6A576996";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0xBD,0x46,0x92,0xF4,0x23,0x55,0x43,0x42,0x1F,0xE1,0x8D,0x6A,0x57,0x69,0x96};

  SelfService_OpenPrinter2W_result(const SelfService_OpenPrinter2W_result&);
  SelfService_OpenPrinter2W_result& operator=(const SelfService_OpenPrinter2W_result&);
  SelfService_OpenPrinter2W_result() {
  }

  virtual ~SelfService_OpenPrinter2W_result() throw();
  std::map<std::string, int64_t>  success;

  _SelfService_OpenPrinter2W_result__isset __isset;

  void __set_success(const std::map<std::string, int64_t> & val);

  bool operator == (const SelfService_OpenPrinter2W_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_OpenPrinter2W_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_OpenPrinter2W_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_OpenPrinter2W_result& obj);
};

typedef struct _SelfService_OpenPrinter2W_presult__isset {
  _SelfService_OpenPrinter2W_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_OpenPrinter2W_presult__isset;

class SelfService_OpenPrinter2W_presult {
 public:

  static const char* ascii_fingerprint; // = "8EBD4692F4235543421FE18D6A576996";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0xBD,0x46,0x92,0xF4,0x23,0x55,0x43,0x42,0x1F,0xE1,0x8D,0x6A,0x57,0x69,0x96};


  virtual ~SelfService_OpenPrinter2W_presult() throw();
  std::map<std::string, int64_t> * success;

  _SelfService_OpenPrinter2W_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_OpenPrinter2W_presult& obj);
};

typedef struct _SelfService_OpenPrinter2A_args__isset {
  _SelfService_OpenPrinter2A_args__isset() : pPrinterName(false), pDefaultExist(false), pDatatype(false), pDevMode(false), DesiredAccess(false), pOptions(false) {}
  bool pPrinterName :1;
  bool pDefaultExist :1;
  bool pDatatype :1;
  bool pDevMode :1;
  bool DesiredAccess :1;
  bool pOptions :1;
} _SelfService_OpenPrinter2A_args__isset;

class SelfService_OpenPrinter2A_args {
 public:

  static const char* ascii_fingerprint; // = "326B0D7BBA9219D347218294DDAADA63";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x6B,0x0D,0x7B,0xBA,0x92,0x19,0xD3,0x47,0x21,0x82,0x94,0xDD,0xAA,0xDA,0x63};

  SelfService_OpenPrinter2A_args(const SelfService_OpenPrinter2A_args&);
  SelfService_OpenPrinter2A_args& operator=(const SelfService_OpenPrinter2A_args&);
  SelfService_OpenPrinter2A_args() : pPrinterName(), pDefaultExist(0), pDatatype(), pDevMode(), DesiredAccess(0), pOptions() {
  }

  virtual ~SelfService_OpenPrinter2A_args() throw();
  std::string pPrinterName;
  bool pDefaultExist;
  std::string pDatatype;
  std::string pDevMode;
  int32_t DesiredAccess;
  std::string pOptions;

  _SelfService_OpenPrinter2A_args__isset __isset;

  void __set_pPrinterName(const std::string& val);

  void __set_pDefaultExist(const bool val);

  void __set_pDatatype(const std::string& val);

  void __set_pDevMode(const std::string& val);

  void __set_DesiredAccess(const int32_t val);

  void __set_pOptions(const std::string& val);

  bool operator == (const SelfService_OpenPrinter2A_args & rhs) const
  {
    if (!(pPrinterName == rhs.pPrinterName))
      return false;
    if (!(pDefaultExist == rhs.pDefaultExist))
      return false;
    if (!(pDatatype == rhs.pDatatype))
      return false;
    if (!(pDevMode == rhs.pDevMode))
      return false;
    if (!(DesiredAccess == rhs.DesiredAccess))
      return false;
    if (!(pOptions == rhs.pOptions))
      return false;
    return true;
  }
  bool operator != (const SelfService_OpenPrinter2A_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_OpenPrinter2A_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_OpenPrinter2A_args& obj);
};


class SelfService_OpenPrinter2A_pargs {
 public:

  static const char* ascii_fingerprint; // = "326B0D7BBA9219D347218294DDAADA63";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x6B,0x0D,0x7B,0xBA,0x92,0x19,0xD3,0x47,0x21,0x82,0x94,0xDD,0xAA,0xDA,0x63};


  virtual ~SelfService_OpenPrinter2A_pargs() throw();
  const std::string* pPrinterName;
  const bool* pDefaultExist;
  const std::string* pDatatype;
  const std::string* pDevMode;
  const int32_t* DesiredAccess;
  const std::string* pOptions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_OpenPrinter2A_pargs& obj);
};

typedef struct _SelfService_OpenPrinter2A_result__isset {
  _SelfService_OpenPrinter2A_result__isset() : success(false) {}
  bool success :1;
} _SelfService_OpenPrinter2A_result__isset;

class SelfService_OpenPrinter2A_result {
 public:

  static const char* ascii_fingerprint; // = "8EBD4692F4235543421FE18D6A576996";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0xBD,0x46,0x92,0xF4,0x23,0x55,0x43,0x42,0x1F,0xE1,0x8D,0x6A,0x57,0x69,0x96};

  SelfService_OpenPrinter2A_result(const SelfService_OpenPrinter2A_result&);
  SelfService_OpenPrinter2A_result& operator=(const SelfService_OpenPrinter2A_result&);
  SelfService_OpenPrinter2A_result() {
  }

  virtual ~SelfService_OpenPrinter2A_result() throw();
  std::map<std::string, int64_t>  success;

  _SelfService_OpenPrinter2A_result__isset __isset;

  void __set_success(const std::map<std::string, int64_t> & val);

  bool operator == (const SelfService_OpenPrinter2A_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_OpenPrinter2A_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_OpenPrinter2A_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_OpenPrinter2A_result& obj);
};

typedef struct _SelfService_OpenPrinter2A_presult__isset {
  _SelfService_OpenPrinter2A_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_OpenPrinter2A_presult__isset;

class SelfService_OpenPrinter2A_presult {
 public:

  static const char* ascii_fingerprint; // = "8EBD4692F4235543421FE18D6A576996";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0xBD,0x46,0x92,0xF4,0x23,0x55,0x43,0x42,0x1F,0xE1,0x8D,0x6A,0x57,0x69,0x96};


  virtual ~SelfService_OpenPrinter2A_presult() throw();
  std::map<std::string, int64_t> * success;

  _SelfService_OpenPrinter2A_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_OpenPrinter2A_presult& obj);
};

typedef struct _SelfService_OpenUsbPort_args__isset {
  _SelfService_OpenUsbPort_args__isset() : dwModel(false) {}
  bool dwModel :1;
} _SelfService_OpenUsbPort_args__isset;

class SelfService_OpenUsbPort_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  SelfService_OpenUsbPort_args(const SelfService_OpenUsbPort_args&);
  SelfService_OpenUsbPort_args& operator=(const SelfService_OpenUsbPort_args&);
  SelfService_OpenUsbPort_args() : dwModel(0) {
  }

  virtual ~SelfService_OpenUsbPort_args() throw();
  int32_t dwModel;

  _SelfService_OpenUsbPort_args__isset __isset;

  void __set_dwModel(const int32_t val);

  bool operator == (const SelfService_OpenUsbPort_args & rhs) const
  {
    if (!(dwModel == rhs.dwModel))
      return false;
    return true;
  }
  bool operator != (const SelfService_OpenUsbPort_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_OpenUsbPort_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_OpenUsbPort_args& obj);
};


class SelfService_OpenUsbPort_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~SelfService_OpenUsbPort_pargs() throw();
  const int32_t* dwModel;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_OpenUsbPort_pargs& obj);
};

typedef struct _SelfService_OpenUsbPort_result__isset {
  _SelfService_OpenUsbPort_result__isset() : success(false) {}
  bool success :1;
} _SelfService_OpenUsbPort_result__isset;

class SelfService_OpenUsbPort_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  SelfService_OpenUsbPort_result(const SelfService_OpenUsbPort_result&);
  SelfService_OpenUsbPort_result& operator=(const SelfService_OpenUsbPort_result&);
  SelfService_OpenUsbPort_result() : success(0) {
  }

  virtual ~SelfService_OpenUsbPort_result() throw();
  int32_t success;

  _SelfService_OpenUsbPort_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SelfService_OpenUsbPort_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_OpenUsbPort_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_OpenUsbPort_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_OpenUsbPort_result& obj);
};

typedef struct _SelfService_OpenUsbPort_presult__isset {
  _SelfService_OpenUsbPort_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_OpenUsbPort_presult__isset;

class SelfService_OpenUsbPort_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~SelfService_OpenUsbPort_presult() throw();
  int32_t* success;

  _SelfService_OpenUsbPort_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_OpenUsbPort_presult& obj);
};


class SelfService_CloseUsbPort_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  SelfService_CloseUsbPort_args(const SelfService_CloseUsbPort_args&);
  SelfService_CloseUsbPort_args& operator=(const SelfService_CloseUsbPort_args&);
  SelfService_CloseUsbPort_args() {
  }

  virtual ~SelfService_CloseUsbPort_args() throw();

  bool operator == (const SelfService_CloseUsbPort_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SelfService_CloseUsbPort_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_CloseUsbPort_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_CloseUsbPort_args& obj);
};


class SelfService_CloseUsbPort_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~SelfService_CloseUsbPort_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_CloseUsbPort_pargs& obj);
};

typedef struct _SelfService_CloseUsbPort_result__isset {
  _SelfService_CloseUsbPort_result__isset() : success(false) {}
  bool success :1;
} _SelfService_CloseUsbPort_result__isset;

class SelfService_CloseUsbPort_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  SelfService_CloseUsbPort_result(const SelfService_CloseUsbPort_result&);
  SelfService_CloseUsbPort_result& operator=(const SelfService_CloseUsbPort_result&);
  SelfService_CloseUsbPort_result() : success(0) {
  }

  virtual ~SelfService_CloseUsbPort_result() throw();
  int32_t success;

  _SelfService_CloseUsbPort_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SelfService_CloseUsbPort_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_CloseUsbPort_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_CloseUsbPort_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_CloseUsbPort_result& obj);
};

typedef struct _SelfService_CloseUsbPort_presult__isset {
  _SelfService_CloseUsbPort_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_CloseUsbPort_presult__isset;

class SelfService_CloseUsbPort_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~SelfService_CloseUsbPort_presult() throw();
  int32_t* success;

  _SelfService_CloseUsbPort_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_CloseUsbPort_presult& obj);
};

typedef struct _SelfService_WriteUSB_args__isset {
  _SelfService_WriteUSB_args__isset() : pBuffer(false), nNumberOfBytesToWrite(false) {}
  bool pBuffer :1;
  bool nNumberOfBytesToWrite :1;
} _SelfService_WriteUSB_args__isset;

class SelfService_WriteUSB_args {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  SelfService_WriteUSB_args(const SelfService_WriteUSB_args&);
  SelfService_WriteUSB_args& operator=(const SelfService_WriteUSB_args&);
  SelfService_WriteUSB_args() : pBuffer(), nNumberOfBytesToWrite(0) {
  }

  virtual ~SelfService_WriteUSB_args() throw();
  std::string pBuffer;
  int32_t nNumberOfBytesToWrite;

  _SelfService_WriteUSB_args__isset __isset;

  void __set_pBuffer(const std::string& val);

  void __set_nNumberOfBytesToWrite(const int32_t val);

  bool operator == (const SelfService_WriteUSB_args & rhs) const
  {
    if (!(pBuffer == rhs.pBuffer))
      return false;
    if (!(nNumberOfBytesToWrite == rhs.nNumberOfBytesToWrite))
      return false;
    return true;
  }
  bool operator != (const SelfService_WriteUSB_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_WriteUSB_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_WriteUSB_args& obj);
};


class SelfService_WriteUSB_pargs {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};


  virtual ~SelfService_WriteUSB_pargs() throw();
  const std::string* pBuffer;
  const int32_t* nNumberOfBytesToWrite;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_WriteUSB_pargs& obj);
};

typedef struct _SelfService_WriteUSB_result__isset {
  _SelfService_WriteUSB_result__isset() : success(false) {}
  bool success :1;
} _SelfService_WriteUSB_result__isset;

class SelfService_WriteUSB_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  SelfService_WriteUSB_result(const SelfService_WriteUSB_result&);
  SelfService_WriteUSB_result& operator=(const SelfService_WriteUSB_result&);
  SelfService_WriteUSB_result() : success(0) {
  }

  virtual ~SelfService_WriteUSB_result() throw();
  int32_t success;

  _SelfService_WriteUSB_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SelfService_WriteUSB_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_WriteUSB_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_WriteUSB_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_WriteUSB_result& obj);
};

typedef struct _SelfService_WriteUSB_presult__isset {
  _SelfService_WriteUSB_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_WriteUSB_presult__isset;

class SelfService_WriteUSB_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~SelfService_WriteUSB_presult() throw();
  int32_t* success;

  _SelfService_WriteUSB_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_WriteUSB_presult& obj);
};

typedef struct _SelfService_ReadUSB_args__isset {
  _SelfService_ReadUSB_args__isset() : pBuffer(false), nNumberOfByteToRead(false) {}
  bool pBuffer :1;
  bool nNumberOfByteToRead :1;
} _SelfService_ReadUSB_args__isset;

class SelfService_ReadUSB_args {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  SelfService_ReadUSB_args(const SelfService_ReadUSB_args&);
  SelfService_ReadUSB_args& operator=(const SelfService_ReadUSB_args&);
  SelfService_ReadUSB_args() : pBuffer(), nNumberOfByteToRead(0) {
  }

  virtual ~SelfService_ReadUSB_args() throw();
  std::string pBuffer;
  int32_t nNumberOfByteToRead;

  _SelfService_ReadUSB_args__isset __isset;

  void __set_pBuffer(const std::string& val);

  void __set_nNumberOfByteToRead(const int32_t val);

  bool operator == (const SelfService_ReadUSB_args & rhs) const
  {
    if (!(pBuffer == rhs.pBuffer))
      return false;
    if (!(nNumberOfByteToRead == rhs.nNumberOfByteToRead))
      return false;
    return true;
  }
  bool operator != (const SelfService_ReadUSB_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_ReadUSB_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_ReadUSB_args& obj);
};


class SelfService_ReadUSB_pargs {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};


  virtual ~SelfService_ReadUSB_pargs() throw();
  const std::string* pBuffer;
  const int32_t* nNumberOfByteToRead;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_ReadUSB_pargs& obj);
};

typedef struct _SelfService_ReadUSB_result__isset {
  _SelfService_ReadUSB_result__isset() : success(false) {}
  bool success :1;
} _SelfService_ReadUSB_result__isset;

class SelfService_ReadUSB_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  SelfService_ReadUSB_result(const SelfService_ReadUSB_result&);
  SelfService_ReadUSB_result& operator=(const SelfService_ReadUSB_result&);
  SelfService_ReadUSB_result() : success(0) {
  }

  virtual ~SelfService_ReadUSB_result() throw();
  int32_t success;

  _SelfService_ReadUSB_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SelfService_ReadUSB_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_ReadUSB_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_ReadUSB_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_ReadUSB_result& obj);
};

typedef struct _SelfService_ReadUSB_presult__isset {
  _SelfService_ReadUSB_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_ReadUSB_presult__isset;

class SelfService_ReadUSB_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~SelfService_ReadUSB_presult() throw();
  int32_t* success;

  _SelfService_ReadUSB_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_ReadUSB_presult& obj);
};

typedef struct _SelfService_PrintBitmap_args__isset {
  _SelfService_PrintBitmap_args__isset() : pbmpDir(false), data(false) {}
  bool pbmpDir :1;
  bool data :1;
} _SelfService_PrintBitmap_args__isset;

class SelfService_PrintBitmap_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  SelfService_PrintBitmap_args(const SelfService_PrintBitmap_args&);
  SelfService_PrintBitmap_args& operator=(const SelfService_PrintBitmap_args&);
  SelfService_PrintBitmap_args() : pbmpDir(), data() {
  }

  virtual ~SelfService_PrintBitmap_args() throw();
  std::string pbmpDir;
  std::string data;

  _SelfService_PrintBitmap_args__isset __isset;

  void __set_pbmpDir(const std::string& val);

  void __set_data(const std::string& val);

  bool operator == (const SelfService_PrintBitmap_args & rhs) const
  {
    if (!(pbmpDir == rhs.pbmpDir))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const SelfService_PrintBitmap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_PrintBitmap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_PrintBitmap_args& obj);
};


class SelfService_PrintBitmap_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~SelfService_PrintBitmap_pargs() throw();
  const std::string* pbmpDir;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_PrintBitmap_pargs& obj);
};

typedef struct _SelfService_PrintBitmap_result__isset {
  _SelfService_PrintBitmap_result__isset() : success(false) {}
  bool success :1;
} _SelfService_PrintBitmap_result__isset;

class SelfService_PrintBitmap_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  SelfService_PrintBitmap_result(const SelfService_PrintBitmap_result&);
  SelfService_PrintBitmap_result& operator=(const SelfService_PrintBitmap_result&);
  SelfService_PrintBitmap_result() : success(0) {
  }

  virtual ~SelfService_PrintBitmap_result() throw();
  int32_t success;

  _SelfService_PrintBitmap_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SelfService_PrintBitmap_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_PrintBitmap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_PrintBitmap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_PrintBitmap_result& obj);
};

typedef struct _SelfService_PrintBitmap_presult__isset {
  _SelfService_PrintBitmap_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_PrintBitmap_presult__isset;

class SelfService_PrintBitmap_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~SelfService_PrintBitmap_presult() throw();
  int32_t* success;

  _SelfService_PrintBitmap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_PrintBitmap_presult& obj);
};

typedef struct _SelfService_Print1DBarcode_args__isset {
  _SelfService_Print1DBarcode_args__isset() : nCodeType(false), nWidth(false), nHeight(false), nHRI(false), pBuffer(false) {}
  bool nCodeType :1;
  bool nWidth :1;
  bool nHeight :1;
  bool nHRI :1;
  bool pBuffer :1;
} _SelfService_Print1DBarcode_args__isset;

class SelfService_Print1DBarcode_args {
 public:

  static const char* ascii_fingerprint; // = "E4E82BD5D05EF295104AEF62FC012D9C";
  static const uint8_t binary_fingerprint[16]; // = {0xE4,0xE8,0x2B,0xD5,0xD0,0x5E,0xF2,0x95,0x10,0x4A,0xEF,0x62,0xFC,0x01,0x2D,0x9C};

  SelfService_Print1DBarcode_args(const SelfService_Print1DBarcode_args&);
  SelfService_Print1DBarcode_args& operator=(const SelfService_Print1DBarcode_args&);
  SelfService_Print1DBarcode_args() : nCodeType(0), nWidth(0), nHeight(0), nHRI(0), pBuffer() {
  }

  virtual ~SelfService_Print1DBarcode_args() throw();
  int32_t nCodeType;
  int32_t nWidth;
  int32_t nHeight;
  int32_t nHRI;
  std::string pBuffer;

  _SelfService_Print1DBarcode_args__isset __isset;

  void __set_nCodeType(const int32_t val);

  void __set_nWidth(const int32_t val);

  void __set_nHeight(const int32_t val);

  void __set_nHRI(const int32_t val);

  void __set_pBuffer(const std::string& val);

  bool operator == (const SelfService_Print1DBarcode_args & rhs) const
  {
    if (!(nCodeType == rhs.nCodeType))
      return false;
    if (!(nWidth == rhs.nWidth))
      return false;
    if (!(nHeight == rhs.nHeight))
      return false;
    if (!(nHRI == rhs.nHRI))
      return false;
    if (!(pBuffer == rhs.pBuffer))
      return false;
    return true;
  }
  bool operator != (const SelfService_Print1DBarcode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_Print1DBarcode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_Print1DBarcode_args& obj);
};


class SelfService_Print1DBarcode_pargs {
 public:

  static const char* ascii_fingerprint; // = "E4E82BD5D05EF295104AEF62FC012D9C";
  static const uint8_t binary_fingerprint[16]; // = {0xE4,0xE8,0x2B,0xD5,0xD0,0x5E,0xF2,0x95,0x10,0x4A,0xEF,0x62,0xFC,0x01,0x2D,0x9C};


  virtual ~SelfService_Print1DBarcode_pargs() throw();
  const int32_t* nCodeType;
  const int32_t* nWidth;
  const int32_t* nHeight;
  const int32_t* nHRI;
  const std::string* pBuffer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_Print1DBarcode_pargs& obj);
};

typedef struct _SelfService_Print1DBarcode_result__isset {
  _SelfService_Print1DBarcode_result__isset() : success(false) {}
  bool success :1;
} _SelfService_Print1DBarcode_result__isset;

class SelfService_Print1DBarcode_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  SelfService_Print1DBarcode_result(const SelfService_Print1DBarcode_result&);
  SelfService_Print1DBarcode_result& operator=(const SelfService_Print1DBarcode_result&);
  SelfService_Print1DBarcode_result() : success(0) {
  }

  virtual ~SelfService_Print1DBarcode_result() throw();
  int32_t success;

  _SelfService_Print1DBarcode_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SelfService_Print1DBarcode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_Print1DBarcode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_Print1DBarcode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_Print1DBarcode_result& obj);
};

typedef struct _SelfService_Print1DBarcode_presult__isset {
  _SelfService_Print1DBarcode_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_Print1DBarcode_presult__isset;

class SelfService_Print1DBarcode_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~SelfService_Print1DBarcode_presult() throw();
  int32_t* success;

  _SelfService_Print1DBarcode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_Print1DBarcode_presult& obj);
};

typedef struct _SelfService_PrintPDF417_args__isset {
  _SelfService_PrintPDF417_args__isset() : nColumns(false), nRows(false), nWidth(false), nHeight(false), nECLevel(false), nModule(false), pBuffer(false), data(false) {}
  bool nColumns :1;
  bool nRows :1;
  bool nWidth :1;
  bool nHeight :1;
  bool nECLevel :1;
  bool nModule :1;
  bool pBuffer :1;
  bool data :1;
} _SelfService_PrintPDF417_args__isset;

class SelfService_PrintPDF417_args {
 public:

  static const char* ascii_fingerprint; // = "4BE77FE21032B84DDBB297EEFF486161";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0xE7,0x7F,0xE2,0x10,0x32,0xB8,0x4D,0xDB,0xB2,0x97,0xEE,0xFF,0x48,0x61,0x61};

  SelfService_PrintPDF417_args(const SelfService_PrintPDF417_args&);
  SelfService_PrintPDF417_args& operator=(const SelfService_PrintPDF417_args&);
  SelfService_PrintPDF417_args() : nColumns(0), nRows(0), nWidth(0), nHeight(0), nECLevel(0), nModule(0), pBuffer(), data() {
  }

  virtual ~SelfService_PrintPDF417_args() throw();
  int32_t nColumns;
  int32_t nRows;
  int32_t nWidth;
  int32_t nHeight;
  int32_t nECLevel;
  int32_t nModule;
  std::string pBuffer;
  std::string data;

  _SelfService_PrintPDF417_args__isset __isset;

  void __set_nColumns(const int32_t val);

  void __set_nRows(const int32_t val);

  void __set_nWidth(const int32_t val);

  void __set_nHeight(const int32_t val);

  void __set_nECLevel(const int32_t val);

  void __set_nModule(const int32_t val);

  void __set_pBuffer(const std::string& val);

  void __set_data(const std::string& val);

  bool operator == (const SelfService_PrintPDF417_args & rhs) const
  {
    if (!(nColumns == rhs.nColumns))
      return false;
    if (!(nRows == rhs.nRows))
      return false;
    if (!(nWidth == rhs.nWidth))
      return false;
    if (!(nHeight == rhs.nHeight))
      return false;
    if (!(nECLevel == rhs.nECLevel))
      return false;
    if (!(nModule == rhs.nModule))
      return false;
    if (!(pBuffer == rhs.pBuffer))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const SelfService_PrintPDF417_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_PrintPDF417_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_PrintPDF417_args& obj);
};


class SelfService_PrintPDF417_pargs {
 public:

  static const char* ascii_fingerprint; // = "4BE77FE21032B84DDBB297EEFF486161";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0xE7,0x7F,0xE2,0x10,0x32,0xB8,0x4D,0xDB,0xB2,0x97,0xEE,0xFF,0x48,0x61,0x61};


  virtual ~SelfService_PrintPDF417_pargs() throw();
  const int32_t* nColumns;
  const int32_t* nRows;
  const int32_t* nWidth;
  const int32_t* nHeight;
  const int32_t* nECLevel;
  const int32_t* nModule;
  const std::string* pBuffer;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_PrintPDF417_pargs& obj);
};

typedef struct _SelfService_PrintPDF417_result__isset {
  _SelfService_PrintPDF417_result__isset() : success(false) {}
  bool success :1;
} _SelfService_PrintPDF417_result__isset;

class SelfService_PrintPDF417_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  SelfService_PrintPDF417_result(const SelfService_PrintPDF417_result&);
  SelfService_PrintPDF417_result& operator=(const SelfService_PrintPDF417_result&);
  SelfService_PrintPDF417_result() : success(0) {
  }

  virtual ~SelfService_PrintPDF417_result() throw();
  int32_t success;

  _SelfService_PrintPDF417_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SelfService_PrintPDF417_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_PrintPDF417_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_PrintPDF417_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_PrintPDF417_result& obj);
};

typedef struct _SelfService_PrintPDF417_presult__isset {
  _SelfService_PrintPDF417_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_PrintPDF417_presult__isset;

class SelfService_PrintPDF417_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~SelfService_PrintPDF417_presult() throw();
  int32_t* success;

  _SelfService_PrintPDF417_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_PrintPDF417_presult& obj);
};

typedef struct _SelfService_PrintQRCode_args__isset {
  _SelfService_PrintQRCode_args__isset() : nModule(false), nSize(false), nECLevel(false), pBuffer(false) {}
  bool nModule :1;
  bool nSize :1;
  bool nECLevel :1;
  bool pBuffer :1;
} _SelfService_PrintQRCode_args__isset;

class SelfService_PrintQRCode_args {
 public:

  static const char* ascii_fingerprint; // = "5805DAA8A1E0142D0F84D212A8253609";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x05,0xDA,0xA8,0xA1,0xE0,0x14,0x2D,0x0F,0x84,0xD2,0x12,0xA8,0x25,0x36,0x09};

  SelfService_PrintQRCode_args(const SelfService_PrintQRCode_args&);
  SelfService_PrintQRCode_args& operator=(const SelfService_PrintQRCode_args&);
  SelfService_PrintQRCode_args() : nModule(0), nSize(0), nECLevel(0), pBuffer() {
  }

  virtual ~SelfService_PrintQRCode_args() throw();
  int32_t nModule;
  int32_t nSize;
  int32_t nECLevel;
  std::string pBuffer;

  _SelfService_PrintQRCode_args__isset __isset;

  void __set_nModule(const int32_t val);

  void __set_nSize(const int32_t val);

  void __set_nECLevel(const int32_t val);

  void __set_pBuffer(const std::string& val);

  bool operator == (const SelfService_PrintQRCode_args & rhs) const
  {
    if (!(nModule == rhs.nModule))
      return false;
    if (!(nSize == rhs.nSize))
      return false;
    if (!(nECLevel == rhs.nECLevel))
      return false;
    if (!(pBuffer == rhs.pBuffer))
      return false;
    return true;
  }
  bool operator != (const SelfService_PrintQRCode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_PrintQRCode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_PrintQRCode_args& obj);
};


class SelfService_PrintQRCode_pargs {
 public:

  static const char* ascii_fingerprint; // = "5805DAA8A1E0142D0F84D212A8253609";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x05,0xDA,0xA8,0xA1,0xE0,0x14,0x2D,0x0F,0x84,0xD2,0x12,0xA8,0x25,0x36,0x09};


  virtual ~SelfService_PrintQRCode_pargs() throw();
  const int32_t* nModule;
  const int32_t* nSize;
  const int32_t* nECLevel;
  const std::string* pBuffer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_PrintQRCode_pargs& obj);
};

typedef struct _SelfService_PrintQRCode_result__isset {
  _SelfService_PrintQRCode_result__isset() : success(false) {}
  bool success :1;
} _SelfService_PrintQRCode_result__isset;

class SelfService_PrintQRCode_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  SelfService_PrintQRCode_result(const SelfService_PrintQRCode_result&);
  SelfService_PrintQRCode_result& operator=(const SelfService_PrintQRCode_result&);
  SelfService_PrintQRCode_result() : success(0) {
  }

  virtual ~SelfService_PrintQRCode_result() throw();
  int32_t success;

  _SelfService_PrintQRCode_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SelfService_PrintQRCode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SelfService_PrintQRCode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelfService_PrintQRCode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SelfService_PrintQRCode_result& obj);
};

typedef struct _SelfService_PrintQRCode_presult__isset {
  _SelfService_PrintQRCode_presult__isset() : success(false) {}
  bool success :1;
} _SelfService_PrintQRCode_presult__isset;

class SelfService_PrintQRCode_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~SelfService_PrintQRCode_presult() throw();
  int32_t* success;

  _SelfService_PrintQRCode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SelfService_PrintQRCode_presult& obj);
};

class SelfServiceClient : virtual public SelfServiceIf {
 public:
  SelfServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SelfServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void OpenPrinterA(std::map<std::string, int64_t> & _return, const std::string& pPrinterName, const bool pDefaultExist, const std::string& pDatatype, const std::string& pDevMode, const int32_t DesiredAccess);
  void send_OpenPrinterA(const std::string& pPrinterName, const bool pDefaultExist, const std::string& pDatatype, const std::string& pDevMode, const int32_t DesiredAccess);
  void recv_OpenPrinterA(std::map<std::string, int64_t> & _return);
  void OpenPrinterW(std::map<std::string, int64_t> & _return, const std::string& pPrinterName, const bool pDefaultExist, const std::string& pDatatype, const std::string& pDevMode, const int32_t DesiredAccess);
  void send_OpenPrinterW(const std::string& pPrinterName, const bool pDefaultExist, const std::string& pDatatype, const std::string& pDevMode, const int32_t DesiredAccess);
  void recv_OpenPrinterW(std::map<std::string, int64_t> & _return);
  bool StartPagePrinter(const int64_t hPrinter);
  void send_StartPagePrinter(const int64_t hPrinter);
  bool recv_StartPagePrinter();
  int32_t StartDocPrinterW(const int64_t hPrinter, const int32_t Level, const std::string& pDocName, const std::string& pOutputFile, const std::string& pDatatype);
  void send_StartDocPrinterW(const int64_t hPrinter, const int32_t Level, const std::string& pDocName, const std::string& pOutputFile, const std::string& pDatatype);
  int32_t recv_StartDocPrinterW();
  void WritePrinter(std::map<std::string, int32_t> & _return, const int64_t hPrinter, const std::string& pBuf, const int32_t cbBuf);
  void send_WritePrinter(const int64_t hPrinter, const std::string& pBuf, const int32_t cbBuf);
  void recv_WritePrinter(std::map<std::string, int32_t> & _return);
  bool EndPagePrinter(const int64_t hPrinter);
  void send_EndPagePrinter(const int64_t hPrinter);
  bool recv_EndPagePrinter();
  bool EndDocPrinter(const int64_t hPrinter);
  void send_EndDocPrinter(const int64_t hPrinter);
  bool recv_EndDocPrinter();
  bool ClosePrinter(const int64_t hPrinter);
  void send_ClosePrinter(const int64_t hPrinter);
  bool recv_ClosePrinter();
  bool CloseSpoolFileHandle(const int64_t hPrinter, const int64_t hSpoolFile);
  void send_CloseSpoolFileHandle(const int64_t hPrinter, const int64_t hSpoolFile);
  bool recv_CloseSpoolFileHandle();
  int64_t CommitSpoolData(const int64_t hPrinter, const int64_t hSpoolFile, const int32_t cbCommit);
  void send_CommitSpoolData(const int64_t hPrinter, const int64_t hSpoolFile, const int32_t cbCommit);
  int64_t recv_CommitSpoolData();
  void DocumentEvent(std::map<std::string, std::string> & _return, const int64_t hPrinter, const int64_t hdc, const int32_t iEsc, const int32_t cbIn, const std::string& pvIn, const int32_t cbOut, const std::string& pvOut);
  void send_DocumentEvent(const int64_t hPrinter, const int64_t hdc, const int32_t iEsc, const int32_t cbIn, const std::string& pvIn, const int32_t cbOut, const std::string& pvOut);
  void recv_DocumentEvent(std::map<std::string, std::string> & _return);
  void DocumentPropertiesW(std::map<std::string, std::string> & _return, const int64_t hWnd, const int64_t hPrinter, const std::string& pDeviceName, const std::string& pDevModeInput, const int32_t fMode);
  void send_DocumentPropertiesW(const int64_t hWnd, const int64_t hPrinter, const std::string& pDeviceName, const std::string& pDevModeInput, const int32_t fMode);
  void recv_DocumentPropertiesW(std::map<std::string, std::string> & _return);
  void EnumFormsW(std::map<std::string, std::string> & _return, const int64_t hPrinter, const int32_t Level, const int32_t cbBuf);
  void send_EnumFormsW(const int64_t hPrinter, const int32_t Level, const int32_t cbBuf);
  void recv_EnumFormsW(std::map<std::string, std::string> & _return);
  void EnumPrintersW(std::map<std::string, std::string> & _return, const int32_t Flags, const std::string& Name, const int32_t Level, const int32_t cbBuf);
  void send_EnumPrintersW(const int32_t Flags, const std::string& Name, const int32_t Level, const int32_t cbBuf);
  void recv_EnumPrintersW(std::map<std::string, std::string> & _return);
  bool FindClosePrinterChangeNotification(const int64_t hChange);
  void send_FindClosePrinterChangeNotification(const int64_t hChange);
  bool recv_FindClosePrinterChangeNotification();
  int64_t FindFirstPrinterChangeNotification(const int64_t hPrinter, const int32_t fdwFilter, const int32_t fdwOptions, const std::string& pPrinterNotifyOptions);
  void send_FindFirstPrinterChangeNotification(const int64_t hPrinter, const int32_t fdwFilter, const int32_t fdwOptions, const std::string& pPrinterNotifyOptions);
  int64_t recv_FindFirstPrinterChangeNotification();
  void FindNextPrinterChangeNotification(std::map<std::string, std::string> & _return, const int64_t hChange, const std::string& pPrinterNotifyOptions);
  void send_FindNextPrinterChangeNotification(const int64_t hChange, const std::string& pPrinterNotifyOptions);
  void recv_FindNextPrinterChangeNotification(std::map<std::string, std::string> & _return);
  bool FreePrinterNotifyInfo(const std::string& pPrinterNotifyInfo);
  void send_FreePrinterNotifyInfo(const std::string& pPrinterNotifyInfo);
  bool recv_FreePrinterNotifyInfo();
  void GetDefaultPrinterW(ArgGetDefaultPrinterW& _return, const ArgGetDefaultPrinterW& arg);
  void send_GetDefaultPrinterW(const ArgGetDefaultPrinterW& arg);
  void recv_GetDefaultPrinterW(ArgGetDefaultPrinterW& _return);
  void GetPrinterDataW(std::map<std::string, std::string> & _return, const int64_t hPrinter, const std::string& pValueName, const int32_t nSize);
  void send_GetPrinterDataW(const int64_t hPrinter, const std::string& pValueName, const int32_t nSize);
  void recv_GetPrinterDataW(std::map<std::string, std::string> & _return);
  void GetPrinterDataExW(std::map<std::string, std::string> & _return, const int64_t hPrinter, const std::string& pKeyName, const std::string& pValueName, const int32_t nSize);
  void send_GetPrinterDataExW(const int64_t hPrinter, const std::string& pKeyName, const std::string& pValueName, const int32_t nSize);
  void recv_GetPrinterDataExW(std::map<std::string, std::string> & _return);
  void GetPrinterW(std::map<std::string, std::string> & _return, const int64_t hPrinter, const int32_t Level, const int32_t cbBuf);
  void send_GetPrinterW(const int64_t hPrinter, const int32_t Level, const int32_t cbBuf);
  void recv_GetPrinterW(std::map<std::string, std::string> & _return);
  int64_t GetSpoolFileHandle(const int64_t hPrinter);
  void send_GetSpoolFileHandle(const int64_t hPrinter);
  int64_t recv_GetSpoolFileHandle();
  bool IsValidDevmodeW(const std::string& pDevmode, const int32_t DevmodeSize);
  void send_IsValidDevmodeW(const std::string& pDevmode, const int32_t DevmodeSize);
  bool recv_IsValidDevmodeW();
  void OpenPrinter2W(std::map<std::string, int64_t> & _return, const std::string& pPrinterName, const bool pDefaultExist, const std::string& pDatatype, const std::string& pDevMode, const int32_t DesiredAccess, const std::string& pOptions);
  void send_OpenPrinter2W(const std::string& pPrinterName, const bool pDefaultExist, const std::string& pDatatype, const std::string& pDevMode, const int32_t DesiredAccess, const std::string& pOptions);
  void recv_OpenPrinter2W(std::map<std::string, int64_t> & _return);
  void OpenPrinter2A(std::map<std::string, int64_t> & _return, const std::string& pPrinterName, const bool pDefaultExist, const std::string& pDatatype, const std::string& pDevMode, const int32_t DesiredAccess, const std::string& pOptions);
  void send_OpenPrinter2A(const std::string& pPrinterName, const bool pDefaultExist, const std::string& pDatatype, const std::string& pDevMode, const int32_t DesiredAccess, const std::string& pOptions);
  void recv_OpenPrinter2A(std::map<std::string, int64_t> & _return);
  int32_t OpenUsbPort(const int32_t dwModel);
  void send_OpenUsbPort(const int32_t dwModel);
  int32_t recv_OpenUsbPort();
  int32_t CloseUsbPort();
  void send_CloseUsbPort();
  int32_t recv_CloseUsbPort();
  int32_t WriteUSB(const std::string& pBuffer, const int32_t nNumberOfBytesToWrite);
  void send_WriteUSB(const std::string& pBuffer, const int32_t nNumberOfBytesToWrite);
  int32_t recv_WriteUSB();
  int32_t ReadUSB(const std::string& pBuffer, const int32_t nNumberOfByteToRead);
  void send_ReadUSB(const std::string& pBuffer, const int32_t nNumberOfByteToRead);
  int32_t recv_ReadUSB();
  int32_t PrintBitmap(const std::string& pbmpDir, const std::string& data);
  void send_PrintBitmap(const std::string& pbmpDir, const std::string& data);
  int32_t recv_PrintBitmap();
  int32_t Print1DBarcode(const int32_t nCodeType, const int32_t nWidth, const int32_t nHeight, const int32_t nHRI, const std::string& pBuffer);
  void send_Print1DBarcode(const int32_t nCodeType, const int32_t nWidth, const int32_t nHeight, const int32_t nHRI, const std::string& pBuffer);
  int32_t recv_Print1DBarcode();
  int32_t PrintPDF417(const int32_t nColumns, const int32_t nRows, const int32_t nWidth, const int32_t nHeight, const int32_t nECLevel, const int32_t nModule, const std::string& pBuffer, const std::string& data);
  void send_PrintPDF417(const int32_t nColumns, const int32_t nRows, const int32_t nWidth, const int32_t nHeight, const int32_t nECLevel, const int32_t nModule, const std::string& pBuffer, const std::string& data);
  int32_t recv_PrintPDF417();
  int32_t PrintQRCode(const int32_t nModule, const int32_t nSize, const int32_t nECLevel, const std::string& pBuffer);
  void send_PrintQRCode(const int32_t nModule, const int32_t nSize, const int32_t nECLevel, const std::string& pBuffer);
  int32_t recv_PrintQRCode();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SelfServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SelfServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SelfServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_OpenPrinterA(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_OpenPrinterW(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StartPagePrinter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StartDocPrinterW(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_WritePrinter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EndPagePrinter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EndDocPrinter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ClosePrinter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CloseSpoolFileHandle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CommitSpoolData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DocumentEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DocumentPropertiesW(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EnumFormsW(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EnumPrintersW(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FindClosePrinterChangeNotification(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FindFirstPrinterChangeNotification(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FindNextPrinterChangeNotification(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FreePrinterNotifyInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDefaultPrinterW(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPrinterDataW(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPrinterDataExW(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPrinterW(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSpoolFileHandle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_IsValidDevmodeW(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_OpenPrinter2W(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_OpenPrinter2A(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_OpenUsbPort(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CloseUsbPort(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_WriteUSB(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReadUSB(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PrintBitmap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Print1DBarcode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PrintPDF417(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PrintQRCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SelfServiceProcessor(boost::shared_ptr<SelfServiceIf> iface) :
    iface_(iface) {
    processMap_["OpenPrinterA"] = &SelfServiceProcessor::process_OpenPrinterA;
    processMap_["OpenPrinterW"] = &SelfServiceProcessor::process_OpenPrinterW;
    processMap_["StartPagePrinter"] = &SelfServiceProcessor::process_StartPagePrinter;
    processMap_["StartDocPrinterW"] = &SelfServiceProcessor::process_StartDocPrinterW;
    processMap_["WritePrinter"] = &SelfServiceProcessor::process_WritePrinter;
    processMap_["EndPagePrinter"] = &SelfServiceProcessor::process_EndPagePrinter;
    processMap_["EndDocPrinter"] = &SelfServiceProcessor::process_EndDocPrinter;
    processMap_["ClosePrinter"] = &SelfServiceProcessor::process_ClosePrinter;
    processMap_["CloseSpoolFileHandle"] = &SelfServiceProcessor::process_CloseSpoolFileHandle;
    processMap_["CommitSpoolData"] = &SelfServiceProcessor::process_CommitSpoolData;
    processMap_["DocumentEvent"] = &SelfServiceProcessor::process_DocumentEvent;
    processMap_["DocumentPropertiesW"] = &SelfServiceProcessor::process_DocumentPropertiesW;
    processMap_["EnumFormsW"] = &SelfServiceProcessor::process_EnumFormsW;
    processMap_["EnumPrintersW"] = &SelfServiceProcessor::process_EnumPrintersW;
    processMap_["FindClosePrinterChangeNotification"] = &SelfServiceProcessor::process_FindClosePrinterChangeNotification;
    processMap_["FindFirstPrinterChangeNotification"] = &SelfServiceProcessor::process_FindFirstPrinterChangeNotification;
    processMap_["FindNextPrinterChangeNotification"] = &SelfServiceProcessor::process_FindNextPrinterChangeNotification;
    processMap_["FreePrinterNotifyInfo"] = &SelfServiceProcessor::process_FreePrinterNotifyInfo;
    processMap_["GetDefaultPrinterW"] = &SelfServiceProcessor::process_GetDefaultPrinterW;
    processMap_["GetPrinterDataW"] = &SelfServiceProcessor::process_GetPrinterDataW;
    processMap_["GetPrinterDataExW"] = &SelfServiceProcessor::process_GetPrinterDataExW;
    processMap_["GetPrinterW"] = &SelfServiceProcessor::process_GetPrinterW;
    processMap_["GetSpoolFileHandle"] = &SelfServiceProcessor::process_GetSpoolFileHandle;
    processMap_["IsValidDevmodeW"] = &SelfServiceProcessor::process_IsValidDevmodeW;
    processMap_["OpenPrinter2W"] = &SelfServiceProcessor::process_OpenPrinter2W;
    processMap_["OpenPrinter2A"] = &SelfServiceProcessor::process_OpenPrinter2A;
    processMap_["OpenUsbPort"] = &SelfServiceProcessor::process_OpenUsbPort;
    processMap_["CloseUsbPort"] = &SelfServiceProcessor::process_CloseUsbPort;
    processMap_["WriteUSB"] = &SelfServiceProcessor::process_WriteUSB;
    processMap_["ReadUSB"] = &SelfServiceProcessor::process_ReadUSB;
    processMap_["PrintBitmap"] = &SelfServiceProcessor::process_PrintBitmap;
    processMap_["Print1DBarcode"] = &SelfServiceProcessor::process_Print1DBarcode;
    processMap_["PrintPDF417"] = &SelfServiceProcessor::process_PrintPDF417;
    processMap_["PrintQRCode"] = &SelfServiceProcessor::process_PrintQRCode;
  }

  virtual ~SelfServiceProcessor() {}
};

class SelfServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SelfServiceProcessorFactory(const ::boost::shared_ptr< SelfServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SelfServiceIfFactory > handlerFactory_;
};

class SelfServiceMultiface : virtual public SelfServiceIf {
 public:
  SelfServiceMultiface(std::vector<boost::shared_ptr<SelfServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SelfServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SelfServiceIf> > ifaces_;
  SelfServiceMultiface() {}
  void add(boost::shared_ptr<SelfServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void OpenPrinterA(std::map<std::string, int64_t> & _return, const std::string& pPrinterName, const bool pDefaultExist, const std::string& pDatatype, const std::string& pDevMode, const int32_t DesiredAccess) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->OpenPrinterA(_return, pPrinterName, pDefaultExist, pDatatype, pDevMode, DesiredAccess);
    }
    ifaces_[i]->OpenPrinterA(_return, pPrinterName, pDefaultExist, pDatatype, pDevMode, DesiredAccess);
    return;
  }

  void OpenPrinterW(std::map<std::string, int64_t> & _return, const std::string& pPrinterName, const bool pDefaultExist, const std::string& pDatatype, const std::string& pDevMode, const int32_t DesiredAccess) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->OpenPrinterW(_return, pPrinterName, pDefaultExist, pDatatype, pDevMode, DesiredAccess);
    }
    ifaces_[i]->OpenPrinterW(_return, pPrinterName, pDefaultExist, pDatatype, pDevMode, DesiredAccess);
    return;
  }

  bool StartPagePrinter(const int64_t hPrinter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StartPagePrinter(hPrinter);
    }
    return ifaces_[i]->StartPagePrinter(hPrinter);
  }

  int32_t StartDocPrinterW(const int64_t hPrinter, const int32_t Level, const std::string& pDocName, const std::string& pOutputFile, const std::string& pDatatype) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StartDocPrinterW(hPrinter, Level, pDocName, pOutputFile, pDatatype);
    }
    return ifaces_[i]->StartDocPrinterW(hPrinter, Level, pDocName, pOutputFile, pDatatype);
  }

  void WritePrinter(std::map<std::string, int32_t> & _return, const int64_t hPrinter, const std::string& pBuf, const int32_t cbBuf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->WritePrinter(_return, hPrinter, pBuf, cbBuf);
    }
    ifaces_[i]->WritePrinter(_return, hPrinter, pBuf, cbBuf);
    return;
  }

  bool EndPagePrinter(const int64_t hPrinter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EndPagePrinter(hPrinter);
    }
    return ifaces_[i]->EndPagePrinter(hPrinter);
  }

  bool EndDocPrinter(const int64_t hPrinter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EndDocPrinter(hPrinter);
    }
    return ifaces_[i]->EndDocPrinter(hPrinter);
  }

  bool ClosePrinter(const int64_t hPrinter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ClosePrinter(hPrinter);
    }
    return ifaces_[i]->ClosePrinter(hPrinter);
  }

  bool CloseSpoolFileHandle(const int64_t hPrinter, const int64_t hSpoolFile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CloseSpoolFileHandle(hPrinter, hSpoolFile);
    }
    return ifaces_[i]->CloseSpoolFileHandle(hPrinter, hSpoolFile);
  }

  int64_t CommitSpoolData(const int64_t hPrinter, const int64_t hSpoolFile, const int32_t cbCommit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CommitSpoolData(hPrinter, hSpoolFile, cbCommit);
    }
    return ifaces_[i]->CommitSpoolData(hPrinter, hSpoolFile, cbCommit);
  }

  void DocumentEvent(std::map<std::string, std::string> & _return, const int64_t hPrinter, const int64_t hdc, const int32_t iEsc, const int32_t cbIn, const std::string& pvIn, const int32_t cbOut, const std::string& pvOut) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DocumentEvent(_return, hPrinter, hdc, iEsc, cbIn, pvIn, cbOut, pvOut);
    }
    ifaces_[i]->DocumentEvent(_return, hPrinter, hdc, iEsc, cbIn, pvIn, cbOut, pvOut);
    return;
  }

  void DocumentPropertiesW(std::map<std::string, std::string> & _return, const int64_t hWnd, const int64_t hPrinter, const std::string& pDeviceName, const std::string& pDevModeInput, const int32_t fMode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DocumentPropertiesW(_return, hWnd, hPrinter, pDeviceName, pDevModeInput, fMode);
    }
    ifaces_[i]->DocumentPropertiesW(_return, hWnd, hPrinter, pDeviceName, pDevModeInput, fMode);
    return;
  }

  void EnumFormsW(std::map<std::string, std::string> & _return, const int64_t hPrinter, const int32_t Level, const int32_t cbBuf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EnumFormsW(_return, hPrinter, Level, cbBuf);
    }
    ifaces_[i]->EnumFormsW(_return, hPrinter, Level, cbBuf);
    return;
  }

  void EnumPrintersW(std::map<std::string, std::string> & _return, const int32_t Flags, const std::string& Name, const int32_t Level, const int32_t cbBuf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EnumPrintersW(_return, Flags, Name, Level, cbBuf);
    }
    ifaces_[i]->EnumPrintersW(_return, Flags, Name, Level, cbBuf);
    return;
  }

  bool FindClosePrinterChangeNotification(const int64_t hChange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FindClosePrinterChangeNotification(hChange);
    }
    return ifaces_[i]->FindClosePrinterChangeNotification(hChange);
  }

  int64_t FindFirstPrinterChangeNotification(const int64_t hPrinter, const int32_t fdwFilter, const int32_t fdwOptions, const std::string& pPrinterNotifyOptions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FindFirstPrinterChangeNotification(hPrinter, fdwFilter, fdwOptions, pPrinterNotifyOptions);
    }
    return ifaces_[i]->FindFirstPrinterChangeNotification(hPrinter, fdwFilter, fdwOptions, pPrinterNotifyOptions);
  }

  void FindNextPrinterChangeNotification(std::map<std::string, std::string> & _return, const int64_t hChange, const std::string& pPrinterNotifyOptions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FindNextPrinterChangeNotification(_return, hChange, pPrinterNotifyOptions);
    }
    ifaces_[i]->FindNextPrinterChangeNotification(_return, hChange, pPrinterNotifyOptions);
    return;
  }

  bool FreePrinterNotifyInfo(const std::string& pPrinterNotifyInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FreePrinterNotifyInfo(pPrinterNotifyInfo);
    }
    return ifaces_[i]->FreePrinterNotifyInfo(pPrinterNotifyInfo);
  }

  void GetDefaultPrinterW(ArgGetDefaultPrinterW& _return, const ArgGetDefaultPrinterW& arg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDefaultPrinterW(_return, arg);
    }
    ifaces_[i]->GetDefaultPrinterW(_return, arg);
    return;
  }

  void GetPrinterDataW(std::map<std::string, std::string> & _return, const int64_t hPrinter, const std::string& pValueName, const int32_t nSize) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPrinterDataW(_return, hPrinter, pValueName, nSize);
    }
    ifaces_[i]->GetPrinterDataW(_return, hPrinter, pValueName, nSize);
    return;
  }

  void GetPrinterDataExW(std::map<std::string, std::string> & _return, const int64_t hPrinter, const std::string& pKeyName, const std::string& pValueName, const int32_t nSize) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPrinterDataExW(_return, hPrinter, pKeyName, pValueName, nSize);
    }
    ifaces_[i]->GetPrinterDataExW(_return, hPrinter, pKeyName, pValueName, nSize);
    return;
  }

  void GetPrinterW(std::map<std::string, std::string> & _return, const int64_t hPrinter, const int32_t Level, const int32_t cbBuf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPrinterW(_return, hPrinter, Level, cbBuf);
    }
    ifaces_[i]->GetPrinterW(_return, hPrinter, Level, cbBuf);
    return;
  }

  int64_t GetSpoolFileHandle(const int64_t hPrinter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSpoolFileHandle(hPrinter);
    }
    return ifaces_[i]->GetSpoolFileHandle(hPrinter);
  }

  bool IsValidDevmodeW(const std::string& pDevmode, const int32_t DevmodeSize) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->IsValidDevmodeW(pDevmode, DevmodeSize);
    }
    return ifaces_[i]->IsValidDevmodeW(pDevmode, DevmodeSize);
  }

  void OpenPrinter2W(std::map<std::string, int64_t> & _return, const std::string& pPrinterName, const bool pDefaultExist, const std::string& pDatatype, const std::string& pDevMode, const int32_t DesiredAccess, const std::string& pOptions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->OpenPrinter2W(_return, pPrinterName, pDefaultExist, pDatatype, pDevMode, DesiredAccess, pOptions);
    }
    ifaces_[i]->OpenPrinter2W(_return, pPrinterName, pDefaultExist, pDatatype, pDevMode, DesiredAccess, pOptions);
    return;
  }

  void OpenPrinter2A(std::map<std::string, int64_t> & _return, const std::string& pPrinterName, const bool pDefaultExist, const std::string& pDatatype, const std::string& pDevMode, const int32_t DesiredAccess, const std::string& pOptions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->OpenPrinter2A(_return, pPrinterName, pDefaultExist, pDatatype, pDevMode, DesiredAccess, pOptions);
    }
    ifaces_[i]->OpenPrinter2A(_return, pPrinterName, pDefaultExist, pDatatype, pDevMode, DesiredAccess, pOptions);
    return;
  }

  int32_t OpenUsbPort(const int32_t dwModel) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->OpenUsbPort(dwModel);
    }
    return ifaces_[i]->OpenUsbPort(dwModel);
  }

  int32_t CloseUsbPort() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CloseUsbPort();
    }
    return ifaces_[i]->CloseUsbPort();
  }

  int32_t WriteUSB(const std::string& pBuffer, const int32_t nNumberOfBytesToWrite) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->WriteUSB(pBuffer, nNumberOfBytesToWrite);
    }
    return ifaces_[i]->WriteUSB(pBuffer, nNumberOfBytesToWrite);
  }

  int32_t ReadUSB(const std::string& pBuffer, const int32_t nNumberOfByteToRead) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReadUSB(pBuffer, nNumberOfByteToRead);
    }
    return ifaces_[i]->ReadUSB(pBuffer, nNumberOfByteToRead);
  }

  int32_t PrintBitmap(const std::string& pbmpDir, const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PrintBitmap(pbmpDir, data);
    }
    return ifaces_[i]->PrintBitmap(pbmpDir, data);
  }

  int32_t Print1DBarcode(const int32_t nCodeType, const int32_t nWidth, const int32_t nHeight, const int32_t nHRI, const std::string& pBuffer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Print1DBarcode(nCodeType, nWidth, nHeight, nHRI, pBuffer);
    }
    return ifaces_[i]->Print1DBarcode(nCodeType, nWidth, nHeight, nHRI, pBuffer);
  }

  int32_t PrintPDF417(const int32_t nColumns, const int32_t nRows, const int32_t nWidth, const int32_t nHeight, const int32_t nECLevel, const int32_t nModule, const std::string& pBuffer, const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PrintPDF417(nColumns, nRows, nWidth, nHeight, nECLevel, nModule, pBuffer, data);
    }
    return ifaces_[i]->PrintPDF417(nColumns, nRows, nWidth, nHeight, nECLevel, nModule, pBuffer, data);
  }

  int32_t PrintQRCode(const int32_t nModule, const int32_t nSize, const int32_t nECLevel, const std::string& pBuffer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PrintQRCode(nModule, nSize, nECLevel, pBuffer);
    }
    return ifaces_[i]->PrintQRCode(nModule, nSize, nECLevel, pBuffer);
  }

};

} // namespace

#endif

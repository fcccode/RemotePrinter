/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "userdefined_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace userdefined {


ArgGetDefaultPrinterW::~ArgGetDefaultPrinterW() throw() {
}


void ArgGetDefaultPrinterW::__set_ret(const bool val) {
  this->ret = val;
}

void ArgGetDefaultPrinterW::__set_pszBuffer(const std::string& val) {
  this->pszBuffer = val;
}

void ArgGetDefaultPrinterW::__set_pcchBuffer(const int32_t val) {
  this->pcchBuffer = val;
}

const char* ArgGetDefaultPrinterW::ascii_fingerprint = "F130B12EADB6306680A7C9A72370EAE1";
const uint8_t ArgGetDefaultPrinterW::binary_fingerprint[16] = {0xF1,0x30,0xB1,0x2E,0xAD,0xB6,0x30,0x66,0x80,0xA7,0xC9,0xA7,0x23,0x70,0xEA,0xE1};

uint32_t ArgGetDefaultPrinterW::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ret);
          this->__isset.ret = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->pszBuffer);
          this->__isset.pszBuffer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pcchBuffer);
          this->__isset.pcchBuffer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ArgGetDefaultPrinterW::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ArgGetDefaultPrinterW");

  xfer += oprot->writeFieldBegin("ret", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->ret);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pszBuffer", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->pszBuffer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pcchBuffer", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->pcchBuffer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ArgGetDefaultPrinterW &a, ArgGetDefaultPrinterW &b) {
  using ::std::swap;
  swap(a.ret, b.ret);
  swap(a.pszBuffer, b.pszBuffer);
  swap(a.pcchBuffer, b.pcchBuffer);
  swap(a.__isset, b.__isset);
}

ArgGetDefaultPrinterW::ArgGetDefaultPrinterW(const ArgGetDefaultPrinterW& other0) {
  ret = other0.ret;
  pszBuffer = other0.pszBuffer;
  pcchBuffer = other0.pcchBuffer;
  __isset = other0.__isset;
}
ArgGetDefaultPrinterW& ArgGetDefaultPrinterW::operator=(const ArgGetDefaultPrinterW& other1) {
  ret = other1.ret;
  pszBuffer = other1.pszBuffer;
  pcchBuffer = other1.pcchBuffer;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ArgGetDefaultPrinterW& obj) {
  using apache::thrift::to_string;
  out << "ArgGetDefaultPrinterW(";
  out << "ret=" << to_string(obj.ret);
  out << ", " << "pszBuffer=" << to_string(obj.pszBuffer);
  out << ", " << "pcchBuffer=" << to_string(obj.pcchBuffer);
  out << ")";
  return out;
}

} // namespace

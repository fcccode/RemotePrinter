/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef userdefined_TYPES_H
#define userdefined_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace userdefined {

class ArgGetDefaultPrinterW;

class ArgEnumPrintersW;

class ArgDocumentPropertiesW;

class ArgGetPrinterW;

typedef struct _ArgGetDefaultPrinterW__isset {
  _ArgGetDefaultPrinterW__isset() : ret(false), pszBuffer(false), pcchBuffer(false) {}
  bool ret :1;
  bool pszBuffer :1;
  bool pcchBuffer :1;
} _ArgGetDefaultPrinterW__isset;

class ArgGetDefaultPrinterW {
 public:

  static const char* ascii_fingerprint; // = "F130B12EADB6306680A7C9A72370EAE1";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0x30,0xB1,0x2E,0xAD,0xB6,0x30,0x66,0x80,0xA7,0xC9,0xA7,0x23,0x70,0xEA,0xE1};

  ArgGetDefaultPrinterW(const ArgGetDefaultPrinterW&);
  ArgGetDefaultPrinterW& operator=(const ArgGetDefaultPrinterW&);
  ArgGetDefaultPrinterW() : ret(0), pszBuffer(), pcchBuffer(0) {
  }

  virtual ~ArgGetDefaultPrinterW() throw();
  bool ret;
  std::string pszBuffer;
  int32_t pcchBuffer;

  _ArgGetDefaultPrinterW__isset __isset;

  void __set_ret(const bool val);

  void __set_pszBuffer(const std::string& val);

  void __set_pcchBuffer(const int32_t val);

  bool operator == (const ArgGetDefaultPrinterW & rhs) const
  {
    if (!(ret == rhs.ret))
      return false;
    if (!(pszBuffer == rhs.pszBuffer))
      return false;
    if (!(pcchBuffer == rhs.pcchBuffer))
      return false;
    return true;
  }
  bool operator != (const ArgGetDefaultPrinterW &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArgGetDefaultPrinterW & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ArgGetDefaultPrinterW& obj);
};

void swap(ArgGetDefaultPrinterW &a, ArgGetDefaultPrinterW &b);

typedef struct _ArgEnumPrintersW__isset {
  _ArgEnumPrintersW__isset() : ret(false), Flags(false), Name(false), Level(false), pPrinterEnum(false), cbBuf(false), pcbNeeded(false), pcReturned(false), int32PrinterEnum(false) {}
  bool ret :1;
  bool Flags :1;
  bool Name :1;
  bool Level :1;
  bool pPrinterEnum :1;
  bool cbBuf :1;
  bool pcbNeeded :1;
  bool pcReturned :1;
  bool int32PrinterEnum :1;
} _ArgEnumPrintersW__isset;

class ArgEnumPrintersW {
 public:

  static const char* ascii_fingerprint; // = "FDA3E4A29FC8F2A906E0E7F414419872";
  static const uint8_t binary_fingerprint[16]; // = {0xFD,0xA3,0xE4,0xA2,0x9F,0xC8,0xF2,0xA9,0x06,0xE0,0xE7,0xF4,0x14,0x41,0x98,0x72};

  ArgEnumPrintersW(const ArgEnumPrintersW&);
  ArgEnumPrintersW& operator=(const ArgEnumPrintersW&);
  ArgEnumPrintersW() : ret(0), Flags(0), Name(), Level(0), pPrinterEnum(), cbBuf(0), pcbNeeded(0), pcReturned(0) {
  }

  virtual ~ArgEnumPrintersW() throw();
  bool ret;
  int32_t Flags;
  std::string Name;
  int32_t Level;
  std::string pPrinterEnum;
  int32_t cbBuf;
  int32_t pcbNeeded;
  int32_t pcReturned;
  std::map<std::string, int32_t>  int32PrinterEnum;

  _ArgEnumPrintersW__isset __isset;

  void __set_ret(const bool val);

  void __set_Flags(const int32_t val);

  void __set_Name(const std::string& val);

  void __set_Level(const int32_t val);

  void __set_pPrinterEnum(const std::string& val);

  void __set_cbBuf(const int32_t val);

  void __set_pcbNeeded(const int32_t val);

  void __set_pcReturned(const int32_t val);

  void __set_int32PrinterEnum(const std::map<std::string, int32_t> & val);

  bool operator == (const ArgEnumPrintersW & rhs) const
  {
    if (!(ret == rhs.ret))
      return false;
    if (!(Flags == rhs.Flags))
      return false;
    if (!(Name == rhs.Name))
      return false;
    if (!(Level == rhs.Level))
      return false;
    if (!(pPrinterEnum == rhs.pPrinterEnum))
      return false;
    if (!(cbBuf == rhs.cbBuf))
      return false;
    if (!(pcbNeeded == rhs.pcbNeeded))
      return false;
    if (!(pcReturned == rhs.pcReturned))
      return false;
    if (!(int32PrinterEnum == rhs.int32PrinterEnum))
      return false;
    return true;
  }
  bool operator != (const ArgEnumPrintersW &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArgEnumPrintersW & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ArgEnumPrintersW& obj);
};

void swap(ArgEnumPrintersW &a, ArgEnumPrintersW &b);

typedef struct _ArgDocumentPropertiesW__isset {
  _ArgDocumentPropertiesW__isset() : ret(false), hHwnd(false), hPrinter(false), pDeviceName(false), pDevModeOutput(false), pDevModeInput(false), fMode(false), lasterror(false) {}
  bool ret :1;
  bool hHwnd :1;
  bool hPrinter :1;
  bool pDeviceName :1;
  bool pDevModeOutput :1;
  bool pDevModeInput :1;
  bool fMode :1;
  bool lasterror :1;
} _ArgDocumentPropertiesW__isset;

class ArgDocumentPropertiesW {
 public:

  static const char* ascii_fingerprint; // = "6873E30F42348638F354653ED57E492E";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x73,0xE3,0x0F,0x42,0x34,0x86,0x38,0xF3,0x54,0x65,0x3E,0xD5,0x7E,0x49,0x2E};

  ArgDocumentPropertiesW(const ArgDocumentPropertiesW&);
  ArgDocumentPropertiesW& operator=(const ArgDocumentPropertiesW&);
  ArgDocumentPropertiesW() : ret(0), hHwnd(0), hPrinter(0), pDeviceName(), pDevModeOutput(), pDevModeInput(), fMode(0), lasterror(0) {
  }

  virtual ~ArgDocumentPropertiesW() throw();
  int32_t ret;
  int64_t hHwnd;
  int64_t hPrinter;
  std::string pDeviceName;
  std::string pDevModeOutput;
  std::string pDevModeInput;
  int32_t fMode;
  int32_t lasterror;

  _ArgDocumentPropertiesW__isset __isset;

  void __set_ret(const int32_t val);

  void __set_hHwnd(const int64_t val);

  void __set_hPrinter(const int64_t val);

  void __set_pDeviceName(const std::string& val);

  void __set_pDevModeOutput(const std::string& val);

  void __set_pDevModeInput(const std::string& val);

  void __set_fMode(const int32_t val);

  void __set_lasterror(const int32_t val);

  bool operator == (const ArgDocumentPropertiesW & rhs) const
  {
    if (!(ret == rhs.ret))
      return false;
    if (!(hHwnd == rhs.hHwnd))
      return false;
    if (!(hPrinter == rhs.hPrinter))
      return false;
    if (!(pDeviceName == rhs.pDeviceName))
      return false;
    if (!(pDevModeOutput == rhs.pDevModeOutput))
      return false;
    if (!(pDevModeInput == rhs.pDevModeInput))
      return false;
    if (!(fMode == rhs.fMode))
      return false;
    if (!(lasterror == rhs.lasterror))
      return false;
    return true;
  }
  bool operator != (const ArgDocumentPropertiesW &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArgDocumentPropertiesW & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ArgDocumentPropertiesW& obj);
};

void swap(ArgDocumentPropertiesW &a, ArgDocumentPropertiesW &b);

typedef struct _ArgGetPrinterW__isset {
  _ArgGetPrinterW__isset() : ret(false), hPrinter(false), Level(false), pPrinter(false), cbBuf(false), pcbNeeded(false), int32Args(false), lasterror(false) {}
  bool ret :1;
  bool hPrinter :1;
  bool Level :1;
  bool pPrinter :1;
  bool cbBuf :1;
  bool pcbNeeded :1;
  bool int32Args :1;
  bool lasterror :1;
} _ArgGetPrinterW__isset;

class ArgGetPrinterW {
 public:

  static const char* ascii_fingerprint; // = "887AC5FA8D7F4FC166B66A9233C106E9";
  static const uint8_t binary_fingerprint[16]; // = {0x88,0x7A,0xC5,0xFA,0x8D,0x7F,0x4F,0xC1,0x66,0xB6,0x6A,0x92,0x33,0xC1,0x06,0xE9};

  ArgGetPrinterW(const ArgGetPrinterW&);
  ArgGetPrinterW& operator=(const ArgGetPrinterW&);
  ArgGetPrinterW() : ret(0), hPrinter(0), Level(0), pPrinter(), cbBuf(0), pcbNeeded(0), lasterror(0) {
  }

  virtual ~ArgGetPrinterW() throw();
  bool ret;
  int64_t hPrinter;
  int32_t Level;
  std::string pPrinter;
  int32_t cbBuf;
  int32_t pcbNeeded;
  std::map<std::string, int32_t>  int32Args;
  int32_t lasterror;

  _ArgGetPrinterW__isset __isset;

  void __set_ret(const bool val);

  void __set_hPrinter(const int64_t val);

  void __set_Level(const int32_t val);

  void __set_pPrinter(const std::string& val);

  void __set_cbBuf(const int32_t val);

  void __set_pcbNeeded(const int32_t val);

  void __set_int32Args(const std::map<std::string, int32_t> & val);

  void __set_lasterror(const int32_t val);

  bool operator == (const ArgGetPrinterW & rhs) const
  {
    if (!(ret == rhs.ret))
      return false;
    if (!(hPrinter == rhs.hPrinter))
      return false;
    if (!(Level == rhs.Level))
      return false;
    if (!(pPrinter == rhs.pPrinter))
      return false;
    if (!(cbBuf == rhs.cbBuf))
      return false;
    if (!(pcbNeeded == rhs.pcbNeeded))
      return false;
    if (!(int32Args == rhs.int32Args))
      return false;
    if (!(lasterror == rhs.lasterror))
      return false;
    return true;
  }
  bool operator != (const ArgGetPrinterW &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArgGetPrinterW & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ArgGetPrinterW& obj);
};

void swap(ArgGetPrinterW &a, ArgGetPrinterW &b);

} // namespace

#endif
